name: "Check"

on:
  push:
    branches-ignore:
      - docs
      - experiment/*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VCPKG_ENABLE_METRICS: 0
  VCPKG_FEATURE_FLAGS: "registries,binarycaching,manifests,versions"

jobs:
  validate:
    name: "Validate"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - name: "Run registry-format.ps1"
        run: |
          $env:VCPKG_ROOT="$env:VCPKG_INSTALLATION_ROOT"
          $env:PATH="$env:VCPKG_ROOT:$env:PATH" # We are in Ubuntu!
          scripts/registry-format.ps1 -VcpkgRoot "${env:VCPKG_ROOT}" -RegistryRoot ${{ github.workspace }}
        shell: pwsh
      - name: "Run git diff"
        run: git diff --exit-code

  overlay:
    name: "Overlay"
    runs-on: ${{ matrix.runner_image }} # https://github.com/actions/runner-images
    needs: validate
    strategy:
      matrix:
        include:
          - runner_image: "ubuntu-latest"
          - runner_image: "macos-13"
          - runner_image: "windows-latest"
      fail-fast: false
    env:
      VCPKG_BINARY_SOURCES: "${{ secrets.VCPKG_BINARY_SOURCES }}"
      VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/ports"
      VCPKG_OVERLAY_TRIPLETS: "${{ github.workspace }}/triplets"
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "${{ runner.temp }}/vcpkg"
          vcpkgGitCommitId: "b02e341c927f16d991edbd915d8ea43eac52096c" # 2025.03.19
          runVcpkgInstall: false

      - name: "Run apt"
        if: runner.os == 'Linux'
        run: |
          # sudo apt update -y
          sudo apt install -y $(cat test/packages-apt.txt)

      - name: "Run homebrew"
        if: runner.os == 'macOS'
        run: brew install autoconf automake libtool

      - uses: mobiledevops/xcode-select-version-action@v1.0.0
        if: matrix.runner_image == 'macos-13'
        with:
          xcode-select-version: "15.2"

      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64

      - name: "Enable LongPath"
        if: runner.os == 'Windows'
        continue-on-error: true
        run: |
          git config --system core.longpaths true
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force
        shell: pwsh

      - name: "Run vcpkg(x64-osx)"
        if: runner.os == 'macOS'
        run: |
          vcpkg install --keep-going \
            --clean-packages-after-build --x-buildtrees-root buildtrees \
            --x-manifest-root test --x-feature test
        shell: bash
        env:
          VCPKG_DEFAULT_TRIPLET: "x64-osx"

      - name: "Run vcpkg(arm64-ios)"
        if: runner.os == 'macOS'
        run: |
          vcpkg install --keep-going \
            --clean-packages-after-build --x-buildtrees-root buildtrees \
            --x-manifest-root test --x-feature test
        shell: bash
        env:
          VCPKG_DEFAULT_TRIPLET: "arm64-ios"

      - name: "Run vcpkg(arm64-ios-simulator)"
        if: runner.os == 'macOS'
        run: |
          vcpkg install --keep-going \
            --clean-packages-after-build --x-buildtrees-root buildtrees \
            --x-manifest-root test --x-feature test
        shell: bash
        env:
          VCPKG_DEFAULT_TRIPLET: "arm64-ios-simulator"
        continue-on-error: true

      - name: "Run vcpkg(x64-linux)"
        if: runner.os == 'Linux'
        run: |
          vcpkg install --keep-going \
            --clean-packages-after-build --x-buildtrees-root buildtrees \
            --x-manifest-root test --x-feature test
        shell: bash
        env:
          VCPKG_DEFAULT_TRIPLET: "x64-linux"

      - name: "Run vcpkg(x64-windows)"
        if: runner.os == 'Windows'
        run: |
          vcpkg install --keep-going `
            --clean-packages-after-build --x-buildtrees-root buildtrees `
            --x-manifest-root test --x-feature test
        shell: pwsh
        env:
          VCPKG_DEFAULT_TRIPLET: "x64-windows"

      - name: "Run vcpkg(arm64-windows)"
        if: runner.os == 'Windows'
        run: |
          vcpkg install --keep-going `
            --clean-packages-after-build --x-buildtrees-root buildtrees `
            --x-manifest-root test --x-feature test
        shell: pwsh
        env:
          VCPKG_DEFAULT_TRIPLET: "arm64-windows"
        continue-on-error: true

      - uses: actions/upload-artifact@v4.6.2
        if: failure()
        with:
          name: log-${{ runner.os }}
          path: |
            buildtrees/*/*.txt
            buildtrees/*/*.log

  host-tools:
    name: "Host Tools"
    runs-on: ${{ matrix.runner_image }} # https://github.com/actions/runner-images
    needs: [validate, overlay]
    strategy:
      matrix:
        include:
          - runner_image: "ubuntu-latest"
          - runner_image: "macos-13"
          # - runner_image: "windows-latest"
      fail-fast: false
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "${{ runner.temp }}/vcpkg"
          vcpkgGitCommitId: "b02e341c927f16d991edbd915d8ea43eac52096c" # 2025.03.19
          runVcpkgInstall: false

      - name: "Run apt"
        if: runner.os == 'Linux'
        run: |
          # sudo apt update -y
          sudo apt install -y $(cat test/packages-apt.txt)

      - name: "Run homebrew"
        if: runner.os == 'macOS'
        run: brew install autoconf automake libtool

      - uses: microsoft/setup-msbuild@v2
        if: runner.os == 'Windows'
        with:
          msbuild-architecture: x64

      - uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "${{ runner.temp }}/vcpkg"
          vcpkgGitCommitId: "b02e341c927f16d991edbd915d8ea43eac52096c" # 2025.03.19
          runVcpkgInstall: true
          runVcpkgFormatString: '[`install`, `--x-feature`, `host-tools`, `--clean-after-build`]'
          vcpkgJsonGlob: "test/vcpkg.json"
          vcpkgConfigurationJsonGlob: "test/vcpkg-configuration.json"
        env:
          VCPKG_BINARY_SOURCES: "${{ secrets.VCPKG_BINARY_SOURCES }}"
          VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/ports"
          VCPKG_OVERLAY_TRIPLETS: "${{ github.workspace }}/triplets"

      - uses: actions/upload-artifact@v4.6.2
        if: failure()
        with:
          name: log-host-tools
          path: |
            buildtrees/*/*.txt
            buildtrees/*/*.log

  android:
    name: "Android"
    runs-on: "ubuntu-latest" # https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2404-Readme.md#environment-variables-2
    needs: validate
    # container: # https://circleci.com/developer/images/image/cimg/android
    #   image: cimg/android:2025.01.1-ndk # 28.0.12674087
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "${{ runner.temp }}/vcpkg"
          vcpkgGitCommitId: "ce613c41372b23b1f51333815feb3edd87ef8a8b" # 2025.04.09
          runVcpkgInstall: false

      - uses: nttld/setup-ndk@v1.5.0
        with:
          ndk-version: 'r29-beta1' # https://github.com/android/ndk/releases
          local-cache: true

      - name: "Run vcpkg(arm64-android)"
        run: |
          vcpkg install --keep-going \
            --clean-packages-after-build --x-buildtrees-root buildtrees \
            --x-manifest-root test --x-feature test
        shell: bash
        env:
          VCPKG_BINARY_SOURCES: "${{ secrets.VCPKG_BINARY_SOURCES }}"
          VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/ports"
          VCPKG_OVERLAY_TRIPLETS: "${{ github.workspace }}/triplets"
          VCPKG_DEFAULT_TRIPLET: "arm64-android"

      - name: "Run vcpkg(x64-android)"
        run: |
          vcpkg install --keep-going \
            --clean-packages-after-build --x-buildtrees-root buildtrees \
            --x-manifest-root test --x-feature test
        shell: bash
        env:
          VCPKG_BINARY_SOURCES: "${{ secrets.VCPKG_BINARY_SOURCES }}"
          VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/ports"
          VCPKG_OVERLAY_TRIPLETS: "${{ github.workspace }}/triplets"
          VCPKG_DEFAULT_TRIPLET: "x64-android"

      - uses: actions/upload-artifact@v4.6.2
        if: failure()
        with:
          name: log-Android
          path: |
            buildtrees/*/*.txt
            buildtrees/*/*.log

  emscripten:
    if: ${{ false }}
    name: "Emscripten"
    runs-on: "ubuntu-latest"
    needs: overlay
    container:
      image: "emscripten/emsdk:3.1.74" # https://hub.docker.com/r/emscripten/emsdk
      env:
        EMSDK_NODE: /emsdk/node/20.18.0_64bit/bin/node
        EMCC_CFLAGS: "-mbulk-memory -matomics -pthread"
    steps:
      - uses: actions/checkout@v4

      - name: "Run apt"
        run: |
          sudo apt update -y
          sudo apt install -y pkg-config python3-pip

      - name: "Run git config"
        run: |
          git config --global --add safe.directory /__w/vcpkg-registry/vcpkg-registry

      - name: "Change vcpkg.json"
        run: mv test/test-emsdk.json test/vcpkg.json

      - uses: lukka/run-vcpkg@v11.5
        with:
          vcpkgDirectory: "${{ runner.temp }}/vcpkg"
          vcpkgJsonGlob: "test/vcpkg.json"
          vcpkgConfigurationJsonGlob: "test/vcpkg-configuration.json"
          runVcpkgInstall: true
        env:
          VCPKG_DEFAULT_TRIPLET: "wasm32-emscripten"
          VCPKG_OVERLAY_PORTS: "${{ github.workspace }}/ports"
          VCPKG_OVERLAY_TRIPLETS: "${{ github.workspace }}/triplets"
