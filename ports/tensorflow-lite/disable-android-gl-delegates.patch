diff --git a/tensorflow/lite/delegates/gpu/delegate.cc b/tensorflow/lite/delegates/gpu/delegate.cc
index 9fac6e59..41d62881 100644
--- a/tensorflow/lite/delegates/gpu/delegate.cc
+++ b/tensorflow/lite/delegates/gpu/delegate.cc
@@ -22,7 +22,7 @@ limitations under the License.
 
 #include "tensorflow/lite/logger.h"
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 #include <android/hardware_buffer.h>
 #endif
 
@@ -41,7 +41,7 @@ limitations under the License.
 #include "absl/types/span.h"
 #include "tensorflow/lite/builtin_ops.h"
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 #include "tensorflow/lite/async/backend_async_kernel_interface.h"
 #include "tensorflow/lite/core/async/c/task.h"
 #include "tensorflow/lite/core/async/interop/c/attribute_map.h"
@@ -61,7 +61,7 @@ limitations under the License.
 #include "tensorflow/lite/delegates/gpu/tflite_profile.h"
 #include "tensorflow/lite/delegates/serialization.h"
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 #include "tensorflow/lite/delegates/gpu/async_buffers.h"
 #include "tensorflow/lite/delegates/gpu/gl/android_sync.h"
 #include "tensorflow/lite/delegates/gpu/gl/egl_environment.h"
@@ -81,7 +81,7 @@ limitations under the License.
 #include "tensorflow/lite/delegates/gpu/gl/api2.h"
 #endif
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 using tflite::delegates::utils::BufferAttributes;
 using tflite::delegates::utils::BufferType;
 using tflite::delegates::utils::ConvertToTfLiteStatus;
@@ -124,7 +124,7 @@ using tflite::TFLITE_LOG_WARNING;
 
 constexpr char kSerializedDataPrefix[] = "gpuv2_data_";
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 // Xeno API does not impose alignment or padding requirements.
 constexpr size_t kRequiredByteAlignment = 1;
 constexpr size_t kRequiredBytePadding = 1;
@@ -222,7 +222,7 @@ bool ParseOptions(const char* const* options_keys,
 // Forward declarations.
 TfLiteStatus DelegatePrepare(TfLiteContext* context, TfLiteDelegate* delegate);
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 class DelegateAsyncKernel;
 #endif
 
@@ -283,7 +283,7 @@ class Delegate {
   bool async_;
 
   friend class DelegateKernelCore;
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
   friend TfLiteRegistration CreateAsyncRegistration();
 #endif
 };
@@ -762,7 +762,7 @@ class DelegateKernel {
   std::thread::id thread_id_prepare_;  // thread id used for Prepare()
 };
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 using BackendAsyncKernelInterface =
     ::tflite::delegates::BackendAsyncKernelInterface;
 
@@ -1470,7 +1470,7 @@ TfLiteRegistration CreateRegistration() {
   };
 }
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 TfLiteRegistration CreateAsyncRegistration() {
   return TfLiteRegistration{
       // .init
@@ -1530,7 +1530,7 @@ TfLiteStatus DelegatePrepare(TfLiteContext* context, TfLiteDelegate* delegate) {
   auto* gpu_delegate = GetDelegate(delegate);
 
   const TfLiteRegistration kRegistration =
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
       gpu_delegate->async() ? CreateAsyncRegistration() : CreateRegistration();
 #else
       CreateRegistration();
@@ -1581,7 +1581,7 @@ TfLiteDelegate* TfLiteGpuDelegateV2Create(
   return gpu_delegate ? gpu_delegate->tflite_delegate() : nullptr;
 }
 
-#if defined(__ANDROID__)
+#if 0 // defined(__ANDROID__)
 TfLiteDelegate* TfLiteGpuDelegateV2CreateAsync(
     const TfLiteGpuDelegateOptionsV2* options) {
   // We depend on the availability of AHardwareBuffer.
