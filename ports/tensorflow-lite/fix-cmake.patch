diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 073b29c4..9cb7f5fd 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -50,14 +50,6 @@ if(NOT TENSORFLOW_SOURCE_DIR)
 endif()
 set(TF_SOURCE_DIR "${TENSORFLOW_SOURCE_DIR}/tensorflow")
 set(TFLITE_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}")
-set(CMAKE_MODULE_PATH
-  "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
-  ${CMAKE_MODULE_PATH}
-)
-set(CMAKE_PREFIX_PATH
-  "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
-  ${CMAKE_PREFIX_PATH}
-)
 include(GNUInstallDirs)
 include(CMakeDependentOption)
 option(TFLITE_ENABLE_INSTALL "Enable install rule" OFF)
@@ -139,15 +131,16 @@ macro(populate_tf_source_vars RELATIVE_DIR SOURCES_VAR)
   )
 endmacro()
 # Find TensorFlow Lite dependencies.
-find_package(absl REQUIRED)
-find_package(Eigen3 REQUIRED)
-find_package(farmhash REQUIRED)
-find_package(fft2d REQUIRED)
-find_package(Flatbuffers REQUIRED)
-find_package(gemmlowp REQUIRED)
-find_package(NEON_2_SSE REQUIRED)
-find_package(cpuinfo REQUIRED)  #CPUINFO is used by XNNPACK and RUY library
-find_package(ruy REQUIRED)
+find_package(absl CONFIG REQUIRED)
+find_package(Eigen3 3.4 CONFIG REQUIRED)
+find_library(FARMHASH_LIBPATH NAMES farmhash REQUIRED)
+find_library(FFT2D_SG2D_LIBPATH NAMES fft2d_fftsg2d REQUIRED)
+find_library(FFT2D_SG_LIBPATH NAMES fft2d_fftsg REQUIRED)
+find_package(Flatbuffers 2.0 CONFIG REQUIRED)
+find_package(gemmlowp CONFIG REQUIRED)
+find_package(NEON_2_SSE CONFIG REQUIRED)
+find_package(cpuinfo CONFIG REQUIRED)
+find_package(ruy CONFIG REQUIRED)
 set(TF_TARGET_PRIVATE_OPTIONS "")
 if(CMAKE_CXX_COMPILER_ID MATCHES "Clang$")
   # TensorFlow uses a heap of deprecated proto fields so surpress these
@@ -197,11 +190,15 @@ if(CMAKE_SYSTEM_NAME MATCHES "Windows")
   endif()
 endif()
 if(CMAKE_SYSTEM_NAME MATCHES "Android")
-  find_library(ANDROID_LOG_LIB log)
+  find_library(ANDROID_LOG_LIB NAMES log REQUIRED)
+  list(APPEND TFLITE_TARGET_DEPENDENCIES ${ANDROID_LOG_LIB})
 endif()
 # Build a list of source files to compile into the TF Lite library.
 populate_tflite_source_vars("." TFLITE_SRCS)
 
+# Exclude tensorflow::profiler usage
+list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*tensorflow_profiler_logger\\.cc$")
+
 # This particular file is excluded because the more explicit approach to enable
 # XNNPACK delegate is preferred to the weak-symbol one.
 list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*tflite_with_xnnpack\\.cc$")
@@ -214,24 +211,83 @@ if(_TFLITE_ENABLE_MMAP)
 else()
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*mmap_allocation\\.cc$")
 endif()
-if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
-  list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_android\\.cc$")
-endif()
-if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "iOS")
-  list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_ios\\.cc$")
+list(FILTER TFLITE_SRCS EXCLUDE REGEX "minimal_logging_.*\\.cc$")
+if(ANDROID)
+  list(APPEND TFLITE_SRCS ${TFLITE_SOURCE_DIR}/minimal_logging_android.cc)
+elseif(IOS)
+  list(APPEND TFLITE_SRCS ${TFLITE_SOURCE_DIR}/minimal_logging_ios.cc)
+else()
+  list(APPEND TFLITE_SRCS ${TFLITE_SOURCE_DIR}/minimal_logging_default.cc)
 endif()
 populate_tflite_source_vars("core" TFLITE_CORE_SRCS)
 populate_tflite_source_vars("core/api" TFLITE_CORE_API_SRCS)
 populate_tflite_source_vars("c" TFLITE_C_SRCS)
 populate_tflite_source_vars("delegates" TFLITE_DELEGATES_SRCS)
 if(TFLITE_ENABLE_GPU)
-  find_package(opencl_headers REQUIRED)
-  find_package(vulkan_headers REQUIRED)
-  find_package(fp16_headers REQUIRED)
-  # Android NDK already has OpenGL, EGL headers.
-  if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
-    find_package(opengl_headers REQUIRED)
-    find_package(egl_headers REQUIRED)
+  # OpenCL from vcpkg
+  if(APPLE)
+    find_path(OpenCL_INCLUDE_DIR "CL/opencl.h" REQUIRED)
+    find_package(OpenCL)
+  elseif(ANDROID)
+    find_path(OpenCL_INCLUDE_DIR "CL/opencl.h" REQUIRED)
+  else()
+    find_package(OpenCL 2.0 REQUIRED)
+  endif()
+  if(OpenCL_LIBRARY)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES ${OpenCL_LIBRARY})
+  endif()
+  # Vulkan headers will be installed with vcpkg
+  find_package(Vulkan)
+  if(Vulkan_FOUND)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES Vulkan::Headers)
+  endif()
+  # OpenGL, EGL headers will be installed with vcpkg
+  if(WIN32 OR ANDROID OR (CMAKE_SYSTEM_NAME STREQUAL Linux))
+    find_library(EGL_LIBPATH NAMES libEGL EGL REQUIRED)
+    find_library(GLES_LIBPATH NAMES libGLESv3 GLESv3 libGLESv2 GLESv2 REQUIRED)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES ${EGL_LIBPATH} ${GLES_LIBPATH})
+    list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DEGL_EGLEXT_PROTOTYPES" "-DEGL_NO_X11")
+  elseif(APPLE)
+    enable_language(OBJC)
+    enable_language(OBJCXX)
+    set(CMAKE_OBJC_STANDARD 11)
+    set(CMAKE_OBJCXX_STANDARD 17)
+    list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL")
+  endif()
+
+  if(TFLITE_ENABLE_METAL AND APPLE)
+    # expect same protobuf version with mlmodel library
+    find_package(Protobuf REQUIRED)
+    # CoreML .proto files from https://github.com/apple/coremltools
+    # note: moved protoc generated code to coreml-tools port
+    find_library(MLMODEL_LIBRARY NAMES mlmodel REQUIRED)
+
+    file(GLOB TFLITE_OBJCXX_SRCS "${TFLITE_SOURCE_DIR}/objc/sources/*.mm")
+    set_source_files_properties(${TFLITE_OBJCXX_SRCS} PROPERTIES
+      LANGUAGE OBJCXX COMPILE_OPTIONS "-fobjc-arc"
+    )
+    file(GLOB TFLITE_OBJC_SRCS "${TFLITE_SOURCE_DIR}/objc/sources/*.m")
+    set_source_files_properties(${TFLITE_OBJC_SRCS} PROPERTIES
+      LANGUAGE OBJC COMPILE_OPTIONS "-fobjc-arc"
+    )
+    populate_tflite_source_vars("delegates/coreml/builders" TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS)
+    file(GLOB TFLITE_DELEGATES_COREML_SRCS "${TFLITE_SOURCE_DIR}/delegates/coreml/*.mm")
+    list(APPEND TFLITE_DELEGATES_PROVIDER_SRCS
+      ${TFLITE_SOURCE_DIR}/tools/delegates/coreml_delegate_provider.cc
+      ${TFLITE_SOURCE_DIR}/tools/delegates/external_delegate_provider.cc
+    )
+    set_source_files_properties(${TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS} ${TFLITE_DELEGATES_COREML_SRCS} ${TFLITE_DELEGATES_PROVIDER_SRCS} PROPERTIES
+      LANGUAGE OBJCXX COMPILE_OPTIONS "-fobjc-arc"
+    )
+
+    list(APPEND TFLITE_TARGET_DEPENDENCIES protobuf::libprotobuf ${MLMODEL_LIBRARY} "-framework Foundation" "-framework Metal" "-framework CoreML")
+    list(APPEND TFLITE_DELEGATES_GPU_SRCS
+      ${TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS}
+      ${TFLITE_DELEGATES_COREML_SRCS}
+      ${TFLITE_DELEGATES_PROVIDER_SRCS}
+      ${TFLITE_OBJCXX_SRCS}
+      ${TFLITE_OBJC_SRCS}
+    )
   endif()
   populate_tflite_source_vars(
     "delegates/gpu/cl" TFLITE_DELEGATES_GPU_CL_SRCS
@@ -305,13 +361,18 @@ if(TFLITE_ENABLE_GPU)
     ${TFLITE_DELEGATES_GPU_COMMON_TRANSFORMATIONS_SRCS}
     ${TFLITE_SOURCE_DIR}/tools/versioning/gpu_compatibility.cc
     ${TFLITE_SOURCE_DIR}/tools/versioning/op_signature.cc
+    ${TFLITE_SOURCE_DIR}/tools/evaluation/utils.cc
+    ${TFLITE_SOURCE_DIR}/tools/tool_params.cc
+    ${TFLITE_SOURCE_DIR}/tools/delegates/delegate_provider.cc
+    ${TFLITE_SOURCE_DIR}/tools/delegates/default_execution_provider.cc
+    ${TFLITE_SOURCE_DIR}/tools/command_line_flags.cc
   )
   include_directories(
     AFTER
     ${TFLITE_SOURCE_DIR}/delegates/gpu/common
     ${TFLITE_SOURCE_DIR}/delegates/gpu/common/task
   )
-  if(TFLITE_ENABLE_METAL AND "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
+  if(TFLITE_ENABLE_METAL AND APPLE)
     #
     # libmetal_delegate library
     #
@@ -319,13 +380,12 @@ if(TFLITE_ENABLE_GPU)
     list(APPEND TFLITE_DELEGATES_METAL_SRCS
       ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate.mm
     )
-    add_library(metal_delegate STATIC
+    add_library(metal_delegate OBJECT
       ${TFLITE_DELEGATES_METAL_SRCS}
     )
-    target_include_directories(metal_delegate PUBLIC
-      ${CMAKE_BINARY_DIR}/abseil-cpp
-      ${CMAKE_BINARY_DIR}/flatbuffers/include
-    )
+    target_include_directories(metal_delegate PRIVATE ${TENSORFLOW_SOURCE_DIR})
+    target_link_libraries(metal_delegate PUBLIC absl::base flatbuffers::flatbuffers)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES metal_delegate)
 
     #
     # supplementary libraries for libmetal_delegate
@@ -334,23 +394,19 @@ if(TFLITE_ENABLE_GPU)
         buffer
         compute_task
         inference_context
-        linear_storage
         metal_arguments
         metal_device
         metal_spatial_tensor
-        texture2d
     )
    SET(METAL_DELEGATE_PATH ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/)
 
    foreach(lib_name ${CC_SRCS})
      set_source_files_properties(${METAL_DELEGATE_PATH}${lib_name}.cc  PROPERTIES LANGUAGE OBJCXX)
-     add_library("${lib_name}" STATIC ${METAL_DELEGATE_PATH}${lib_name}.cc)
-     target_include_directories("${lib_name}" PUBLIC
-       ${CMAKE_BINARY_DIR}/abseil-cpp
-       ${CMAKE_BINARY_DIR}/flatbuffers/include
-     )
+     add_library(${lib_name} OBJECT ${METAL_DELEGATE_PATH}${lib_name}.cc)
+     target_link_libraries(${lib_name} PUBLIC absl::base flatbuffers::flatbuffers)
+     target_include_directories(${lib_name} PRIVATE ${TENSORFLOW_SOURCE_DIR})
      set_target_properties(${lib_name} PROPERTIES LINKER_LANGUAGE OBJCXX)
-     target_link_libraries(${lib_name})
+     list(APPEND TFLITE_TARGET_DEPENDENCIES "${lib_name}")
    endforeach()
 
    list(APPEND MM_SRCS
@@ -358,12 +414,10 @@ if(TFLITE_ENABLE_GPU)
      common
    )
    foreach(lib_name ${MM_SRCS})
-     add_library("${lib_name}" STATIC ${METAL_DELEGATE_PATH}${lib_name}.mm)
-     target_include_directories("${lib_name}" PUBLIC
-       ${CMAKE_BINARY_DIR}/abseil-cpp
-       ${CMAKE_BINARY_DIR}/flatbuffers/include
-     )
-     target_link_libraries(${lib_name})
+     add_library(${lib_name} OBJECT ${METAL_DELEGATE_PATH}${lib_name}.mm)
+     target_link_libraries(${lib_name} PUBLIC absl::base flatbuffers::flatbuffers)
+     target_include_directories(${lib_name} PRIVATE ${TENSORFLOW_SOURCE_DIR})
+     list(APPEND TFLITE_TARGET_DEPENDENCIES "${lib_name}")
    endforeach()
 endif()
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL" "-DEGL_NO_X11")
@@ -373,7 +427,7 @@ endif()
   )
 endif()
 if(_TFLITE_ENABLE_NNAPI)
-  find_package(fp16_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
   populate_tflite_source_vars("delegates/nnapi"
     TFLITE_DELEGATES_NNAPI_SRCS
     FILTER "(_test_list|_disabled)\\.(cc|h)$"
@@ -383,9 +437,13 @@ if(_TFLITE_ENABLE_NNAPI)
   )
 
   list(APPEND TFLITE_NNAPI_SRCS
+    ${TF_SOURCE_DIR}/tsl/platform/default/logging.h
+    ${TF_SOURCE_DIR}/tsl/platform/default/logging.cc
+    ${TF_SOURCE_DIR}/tsl/platform/default/mutex.cc
     "${TFLITE_SOURCE_DIR}/nnapi/sl/SupportLibrary.cc"
   )
-
+  find_library(NSYNC_LIBRARY NAMES nsync_cpp nsync REQUIRED)
+  list(APPEND TFLITE_TARGET_DEPENDENCIES ${NSYNC_LIBRARY})
   if(${TFLITE_ENABLE_NNAPI_VERBOSE_VALIDATION})
     list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DNNAPI_VERBOSE_VALIDATION")
   endif()
@@ -398,14 +456,16 @@ else()
   )
 endif()
 if(TFLITE_ENABLE_XNNPACK)
-  find_package(fp16_headers REQUIRED)
-  find_package(XNNPACK REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
+  find_package(unofficial-pthreadpool CONFIG REQUIRED)
+  find_package(cpuinfo CONFIG REQUIRED)
+  find_package(xnnpack CONFIG REQUIRED)
   populate_tflite_source_vars("delegates/xnnpack"
     TFLITE_DELEGATES_XNNPACK_SRCS
     FILTER ".*(_test|_tester)\\.(cc|h)"
   )
   list(APPEND TFLITE_TARGET_DEPENDENCIES
-    XNNPACK
+    xnnpack cpuinfo::clog cpuinfo::cpuinfo unofficial::pthreadpool
   )
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFLITE_BUILD_WITH_XNNPACK_DELEGATE")
 endif()
@@ -470,11 +530,12 @@ if(CMAKE_SYSTEM_NAME MATCHES "Android")
   list(APPEND TFLITE_PROFILER_SRCS
     ${TFLITE_SOURCE_DIR}/profiling/atrace_profiler.cc
   )
-elseif(CMAKE_SYSTEM_NAME MATCHES "iOS")
+elseif(APPLE)
   enable_language(OBJCXX)
   list(APPEND TFLITE_PROFILER_SRCS
     ${TFLITE_SOURCE_DIR}/profiling/signpost_profiler.mm
   )
+  list(APPEND TFLITE_TARGET_DEPENDENCIES "-framework Foundation")
 endif()
 
 # TFLite library
@@ -526,15 +587,43 @@ target_link_libraries(tensorflow-lite
     absl::strings
     absl::synchronization
     absl::variant
-    farmhash
-    fft2d_fftsg2d
+    ${FARMHASH_LIBPATH}
+    ${FFT2D_SG2D_LIBPATH} ${FFT2D_SG_LIBPATH}
     flatbuffers::flatbuffers
-    gemmlowp
+    gemmlowp::gemmlowp
     ruy::ruy
     ${CMAKE_DL_LIBS}
+  PRIVATE
     ${TFLITE_TARGET_DEPENDENCIES}
 )
 
+# include sources of tensorflowlite_c
+target_sources(tensorflow-lite PRIVATE
+  c/builtin_op_data.h
+  c/common.h
+  c/common.cc
+  c/c_api_types.h
+  c/c_api.h
+  c/c_api.cc
+  c/c_api_experimental.h
+  c/c_api_experimental.cc
+  c/c_api_internal.h
+  c/c_api_internal.cc
+  c/c_api_opaque_internal.cc
+)
+if(WIN32)
+  target_sources(tensorflow-lite PRIVATE ${TF_SOURCE_DIR}/tsl/platform/windows/env_time.cc)
+else()
+  target_sources(tensorflow-lite PRIVATE ${TF_SOURCE_DIR}/tsl/platform/default/env_time.cc)
+endif()
+if (WIN32)
+  target_compile_definitions(tensorflow-lite PRIVATE TFL_COMPILE_LIBRARY)
+  target_link_libraries(tensorflow-lite PRIVATE Kernel32) # for UWP
+elseif (APPLE)
+  target_link_options(tensorflow-lite PRIVATE "-Wl,-exported_symbols_list,${TENSORFLOW_SOURCE_DIR}/tensorflow/lite/c/exported_symbols.lds")
+else()
+  target_link_options(tensorflow-lite PRIVATE "-Wl,--version-script,${TENSORFLOW_SOURCE_DIR}/tensorflow/lite/c/version_script.lds")
+endif()
 if (NOT BUILD_SHARED_LIBS)
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFL_STATIC_LIBRARY_BUILD")
 endif()
@@ -554,14 +643,49 @@ if(TFLITE_ENABLE_INSTALL)
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
   )
 
-  foreach(hdr ${_ALL_TFLITE_HDRS})
-    get_filename_component(dir ${hdr} DIRECTORY)
-    file(RELATIVE_PATH dir ${CMAKE_CURRENT_SOURCE_DIR} ${dir})
-    install(
-      FILES ${hdr}
-      DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/${dir}"
-    )
-  endforeach()
+  install(DIRECTORY ${TFLITE_SOURCE_DIR}/c
+    DESTINATION     ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite
+    FILES_MATCHING PATTERN "*.h"
+  )
+  install(FILES ${TFLITE_SOURCE_DIR}/builtin_ops.h
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite
+  )
+  install(FILES ${TFLITE_SOURCE_DIR}/delegates/gpu/delegate.h
+                ${TFLITE_SOURCE_DIR}/delegates/gpu/cl/gpu_api_delegate.h
+                ${TFLITE_SOURCE_DIR}/delegates/gpu/gl_delegate.h
+                ${TFLITE_SOURCE_DIR}/delegates/gpu/delegate_options.h
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/gpu
+  )
+  install(FILES ${TFLITE_SOURCE_DIR}/delegates/xnnpack/xnnpack_delegate.h
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/xnnpack
+  )
+  install(FILES ${TFLITE_SOURCE_DIR}/delegates/external/external_delegate.h
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/external
+  )
+  install(FILES ${TFLITE_SOURCE_DIR}/delegates/hexagon/hexagon_delegate.h
+    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/hexagon
+  )
+  if(APPLE)
+    install(FILES ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate.h
+                  ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate_internal.h
+      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/gpu
+    )
+    install(FILES ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate.h
+      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/coreml
+    )
+  endif()
+  if(ANDROID)
+    install(FILES ${TFLITE_SOURCE_DIR}/nnapi/NeuralNetworksTypes.h
+                  ${TFLITE_SOURCE_DIR}/nnapi/NeuralNetworksShim.h
+                  ${TFLITE_SOURCE_DIR}/nnapi/nnapi_implementation.h
+                  ${TFLITE_SOURCE_DIR}/nnapi/nnapi_util.h
+      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/nnapi
+    )
+    install(FILES ${TFLITE_SOURCE_DIR}/delegates/nnapi/nnapi_delegate.h
+                  ${TFLITE_SOURCE_DIR}/delegates/nnapi/nnapi_delegate_c_api.h
+      DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/nnapi
+    )
+  endif()
 
   install(
     EXPORT ${PROJECT_NAME}Targets
@@ -584,6 +708,7 @@ if(TFLITE_ENABLE_INSTALL)
   )
 endif()
 
+return() # ----- Discard the other targets -----
 # The kernel tests.
 if(TFLITE_KERNEL_TEST)
   enable_testing()
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 1267b46c..9f2157ee 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -289,6 +289,22 @@ if(TFLITE_ENABLE_GPU)
       ${TFLITE_OBJC_SRCS}
     )
   endif()
+  if(WIN32 OR ANDROID)
+    populate_tflite_source_vars("delegates/gpu/gl/compiler" TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS)
+    populate_tflite_source_vars("delegates/gpu/gl/converters" TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS)
+    populate_tflite_source_vars("delegates/gpu/gl/kernels" TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS)
+    populate_tflite_source_vars("delegates/gpu/gl/runtime" TFLITE_DELEGATES_GPU_GL_RUNTIME_SRCS)
+    populate_tflite_source_vars("delegates/gpu/gl/workgroups" TFLITE_DELEGATES_GPU_GL_WORKGROUPS_SRCS)
+    populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS)
+    list(APPEND TFLITE_DELEGATES_GPU_SRCS
+      ${TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS}
+      ${TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS}
+      ${TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS}
+      ${TFLITE_DELEGATES_GPU_GL_RUNTIME_SRCS}
+      ${TFLITE_DELEGATES_GPU_GL_WORKGROUPS_SRCS}
+      ${TFLITE_DELEGATES_GPU_GL_SRCS}
+    )
+  endif()
   populate_tflite_source_vars(
     "delegates/gpu/cl" TFLITE_DELEGATES_GPU_CL_SRCS
     FILTER "(_test|gl_interop|gpu_api_delegate|egl_sync)\\.(cc|h)$"
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 9f2157ee..ebe824d2 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -305,6 +305,15 @@ if(TFLITE_ENABLE_GPU)
       ${TFLITE_DELEGATES_GPU_GL_SRCS}
     )
   endif()
+  if(WITH_MEDIAPIPE)
+    # custom_registry.cc from TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS
+    list(FILTER TFLITE_DELEGATES_GPU_SRCS EXCLUDE REGEX  ".*custom_registry\\.cc$")
+    # mediapipe/registry.cc will replace RegisterCustomOps
+    populate_tflite_source_vars("delegates/gpu/gl/kernels/mediapipe" TFLITE_DELEGATES_GPU_GL_KERNELS_MEDIAPIPE_SRCS)
+    list(APPEND TFLITE_DELEGATES_GPU_SRCS
+      ${TFLITE_DELEGATES_GPU_GL_KERNELS_MEDIAPIPE_SRCS}
+    )
+  endif()
   populate_tflite_source_vars(
     "delegates/gpu/cl" TFLITE_DELEGATES_GPU_CL_SRCS
     FILTER "(_test|gl_interop|gpu_api_delegate|egl_sync)\\.(cc|h)$"
