diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 40f9485b..e1d506e7 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -58,6 +58,7 @@ set(CMAKE_PREFIX_PATH
   "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
   ${CMAKE_PREFIX_PATH}
 )
+include(GNUInstallDirs)
 include(CMakeDependentOption)
 option(TFLITE_ENABLE_RUY "Enable experimental RUY integration" OFF)
 option(TFLITE_ENABLE_RESOURCE "Enable experimental support for resources" ON)
@@ -137,16 +138,16 @@ macro(populate_tf_source_vars RELATIVE_DIR SOURCES_VAR)
   )
 endmacro()
 # Find TensorFlow Lite dependencies.
-find_package(absl REQUIRED)
-find_package(eigen REQUIRED)
-find_package(farmhash REQUIRED)
-find_package(fft2d REQUIRED)
-find_package(flatbuffers REQUIRED)
-find_package(gemmlowp REQUIRED)
-find_package(neon2sse REQUIRED)
-find_package(clog REQUIRED)
-find_package(cpuinfo REQUIRED)  #CPUINFO is used by XNNPACK and RUY library
-find_package(ruy REQUIRED)
+find_package(absl CONFIG REQUIRED)
+find_package(Eigen3 3.4 CONFIG REQUIRED)
+find_library(FARMHASH_LIBPATH farmhash REQUIRED)
+find_library(FFT2D_SG2D_LIBPATH fft2d_fftsg2d REQUIRED)
+find_library(FFT2D_SG_LIBPATH fft2d_fftsg REQUIRED)
+find_package(Flatbuffers 2.0 CONFIG REQUIRED)
+find_package(gemmlowp CONFIG REQUIRED)
+find_package(NEON_2_SSE CONFIG REQUIRED)
+find_package(cpuinfo CONFIG REQUIRED)
+find_package(ruy CONFIG REQUIRED)
 # Generate TensorFlow Lite FlatBuffer code.
 # We used to have an actual compilation logic with flatc but decided to use
 # schema_generated.h since flatc doesn't work with cross compilation.
@@ -198,7 +199,9 @@ if(CMAKE_SYSTEM_NAME MATCHES "Windows")
   endif()
 endif()
 if(CMAKE_SYSTEM_NAME MATCHES "Android")
-  find_library(ANDROID_LOG_LIB log)
+  find_library(ANDROID_LOG_LIB log REQUIRED)
+  find_library(NSYNC_LIB NAMES nsync_cpp nsync REQUIRED)
+  list(APPEND TFLITE_TARGET_DEPENDENCIES ${ANDROID_LOG_LIB} ${NSYNC_LIB})
 endif()
 # Build a list of source files to compile into the TF Lite library.
 populate_tflite_source_vars("." TFLITE_SRCS)
@@ -215,24 +218,132 @@ if(_TFLITE_ENABLE_MMAP)
 else()
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*mmap_allocation\\.cc$")
 endif()
-if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
+
+# Prevent log function duplication
+if(ANDROID)
+  list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_default\\.cc$")
+  list(APPEND TFLITE_SRCS
+    ${TF_SOURCE_DIR}/core/platform/default/logging.cc ${TF_SOURCE_DIR}/core/platform/default/mutex.cc
+  )
+else()
+  list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_ios\\.cc$")
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_android\\.cc$")
 endif()
-if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "iOS")
+if(NOT IOS)
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_ios\\.cc$")
+else()
+  list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_default\\.cc$")
+  list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*minimal_logging_android\\.cc$")
 endif()
+
 populate_tflite_source_vars("core" TFLITE_CORE_SRCS)
 populate_tflite_source_vars("core/api" TFLITE_CORE_API_SRCS)
 populate_tflite_source_vars("c" TFLITE_C_SRCS)
 populate_tflite_source_vars("delegates" TFLITE_DELEGATES_SRCS)
 if(TFLITE_ENABLE_GPU)
-  find_package(opencl_headers REQUIRED)
-  find_package(vulkan_headers REQUIRED)
-  find_package(fp16_headers REQUIRED)
-  # Android NDK already has OpenGL, EGL headers.
-  if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
-    find_package(opengl_headers REQUIRED)
-    find_package(egl_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
+  if(APPLE)
+    # Prevent using OpenCL.framework because we need version 2.0+
+    find_path(OpenCL_INCLUDE_DIR "CL/opencl.h" REQUIRED)
+    find_library(OpenCL_LIBRARY NAMES OpenCL REQUIRED NO_CMAKE_SYSTEM_PATH)
+  elseif(ANDROID)
+    find_path(OpenCL_INCLUDE_DIR "CL/opencl.h" REQUIRED)
+  else()
+    find_package(OpenCL REQUIRED)
+  endif()
+  # Vulkan is optional
+  find_package(Vulkan)
+  if(Vulkan_FOUND)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES Vulkan::Headers)
+  endif()
+  # OpenGL, EGL headers will be installed with vcpkg
+  if(WIN32 OR ANDROID OR (CMAKE_SYSTEM_NAME STREQUAL Linux))
+    find_library(EGL_LIBPATH NAMES libEGL EGL REQUIRED)
+    find_library(GLES_LIBPATH NAMES libGLESv3 GLESv3 libGLESv2 GLESv2 REQUIRED)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES ${EGL_LIBPATH} ${GLES_LIBPATH})
+    list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DEGL_EGLEXT_PROTOTYPES" "-DEGL_NO_X11")
+  elseif(APPLE)
+    enable_language(OBJC)
+    enable_language(OBJCXX)
+    set(CMAKE_OBJC_STANDARD 11)
+    set(CMAKE_OBJCXX_STANDARD 17)
+    list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL")
+    # note: compile option "-fobjc-arc" is required for Objective C/C++ sources.
+  endif()
+
+  if(WIN32 OR ANDROID OR (CMAKE_SYSTEM_NAME STREQUAL Linux))
+    populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(_test)\\.(cc|h)$")
+    populate_tflite_source_vars("delegates/gpu/gl/compiler" TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS FILTER "(_test)\\.(cc|h)$")
+    populate_tflite_source_vars("delegates/gpu/gl/converters" TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS FILTER "(_test)\\.(cc|h)$")
+    populate_tflite_source_vars("delegates/gpu/gl/kernels" TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS FILTER "(_test)\\.(cc|h)$")
+    populate_tflite_source_vars("delegates/gpu/gl/runtime" TFLITE_DELEGATES_GPU_GL_RUNTIME_SRCS FILTER "(_test)\\.(cc|h)$")
+    populate_tflite_source_vars("delegates/gpu/gl/workgroups" TFLITE_DELEGATES_GPU_GL_WORKGROUPS_SRCS FILTER "(_test)\\.(cc|h)$")
+    list(APPEND TFLITE_DELEGATES_GPU_EGL_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/cl/egl_sync.cc
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/cl/gl_interop.cc
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/gl_delegate.cc
+    )
+    list(APPEND TFLITE_DELEGATES_GPU_SRCS
+      ${TFLITE_DELEGATES_GPU_EGL_SRCS} ${TFLITE_DELEGATES_GPU_GL_SRCS} ${TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS} ${TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS} ${TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS} ${TFLITE_DELEGATES_GPU_GL_RUNTIME_SRCS} ${TFLITE_DELEGATES_GPU_GL_WORKGROUPS_SRCS}
+    )
+
+  elseif(APPLE)
+    find_program(Protobuf_PROTOC_EXECUTABLE NAMES protoc REQUIRED)
+    find_package(Protobuf REQUIRED)
+    # CoreML .proto files from https://github.com/apple/coremltools
+    file(GLOB COREML_MLMODEL_FORMAT_PROTO_FILES "${COREML_SOURCE_DIR}/mlmodel/format/*.proto")
+    protobuf_generate(
+        LANGUAGE cpp
+        IMPORT_DIRS ${COREML_SOURCE_DIR}/mlmodel/format
+        PROTOC_OUT_DIR ${COREML_SOURCE_DIR}/mlmodel/format
+        PROTOS ${COREML_MLMODEL_FORMAT_PROTO_FILES}
+        OUT_VAR COREML_MLMODEL_FORMAT_PROTO_SRCS
+    )
+    populate_tflite_source_vars("delegates/gpu/metal" TFLITE_DELEGATES_GPU_METAL_CXX_SRCS FILTER "(_test)\\.(m|mm|cc|h)$")
+
+    list(APPEND TFLITE_OBJC_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/buffer_convert.mm
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLCoreMLDelegate.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLInterpreter+Internal.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLQuantizationParameters+Internal.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLDelegate.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLInterpreter.mm
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLQuantizationParameters.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLErrorUtil.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLInterpreterOptions.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLTensor+Internal.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLErrorUtil.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLMetalDelegate.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLTensor.m
+    )
+    list(APPEND TFLITE_DELEGATES_GPU_METAL_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/common.h
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/common.mm
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate_internal.h
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate.mm
+    )
+    populate_tflite_source_vars("delegates/coreml/builders" TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS FILTER "(_test)\\.(m|mm|cc|h)$")
+
+    list(APPEND TFLITE_DELEGATES_COREML_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate.h ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate.mm
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate_kernel.h ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate_kernel.mm
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_executor.h ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_executor.mm
+      ${TFLITE_SOURCE_DIR}/tools/delegates/coreml_delegate_provider.cc
+      ${TFLITE_SOURCE_DIR}/tools/delegates/delegate_provider.cc
+      ${TFLITE_SOURCE_DIR}/tools/delegates/default_execution_provider.cc
+      ${TFLITE_SOURCE_DIR}/tools/delegates/external_delegate_provider.cc
+      ${TFLITE_SOURCE_DIR}/tools/tool_params.cc
+      ${TFLITE_SOURCE_DIR}/tools/command_line_flags.cc
+    )
+
+    set_source_files_properties(${TFLITE_DELEGATES_GPU_METAL_CXX_SRCS} ${TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS} ${TFLITE_OBJC_SRCS} ${TFLITE_DELEGATES_GPU_METAL_SRCS} ${TFLITE_DELEGATES_COREML_SRCS}
+    PROPERTIES
+      COMPILE_OPTIONS "-fobjc-arc"
+    )
+    list(APPEND TFLITE_TARGET_DEPENDENCIES "-framework Foundation" "-framework Metal" "-framework CoreML" protobuf::libprotobuf)
+    list(APPEND TFLITE_DELEGATES_GPU_SRCS
+      ${TFLITE_DELEGATES_GPU_METAL_CXX_SRCS} ${TFLITE_DELEGATES_GPU_METAL_SRCS} ${TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS} ${TFLITE_DELEGATES_COREML_BUILDERS_SRCS} ${TFLITE_DELEGATES_COREML_SRCS} ${TFLITE_DELEGATES_COREML_PROVIDER_SRCS} ${COREML_MLMODEL_FORMAT_PROTO_SRCS} ${TFLITE_OBJC_SRCS}
+    )
   endif()
   populate_tflite_source_vars(
     "delegates/gpu/cl" TFLITE_DELEGATES_GPU_CL_SRCS
@@ -361,14 +472,14 @@ if(TFLITE_ENABLE_GPU)
      target_link_libraries(${lib_name})
    endforeach()
 endif()
-  list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL" "-DEGL_NO_X11")
   list(APPEND TFLITE_TARGET_DEPENDENCIES
     absl::any
     absl::flat_hash_map
+    ${OpenCL_LIBRARY} # OpenCL::OpenCL
   )
 endif()
 if(_TFLITE_ENABLE_NNAPI)
-  find_package(fp16_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
   populate_tflite_source_vars("delegates/nnapi"
     TFLITE_DELEGATES_NNAPI_SRCS
     FILTER "(_test_list|_disabled)\\.(cc|h)$"
@@ -388,14 +499,15 @@ else()
   )
 endif()
 if(TFLITE_ENABLE_XNNPACK)
-  find_package(fp16_headers REQUIRED)
-  find_package(xnnpack REQUIRED)
+  find_package(unofficial-pthreadpool CONFIG REQUIRED)
+  find_package(cpuinfo CONFIG REQUIRED)
+  find_package(xnnpack CONFIG REQUIRED)
   populate_tflite_source_vars("delegates/xnnpack"
     TFLITE_DELEGATES_XNNPACK_SRCS
     FILTER ".*(_test|_tester)\\.(cc|h)"
   )
   list(APPEND TFLITE_TARGET_DEPENDENCIES
-    XNNPACK
+    xnnpack cpuinfo::clog cpuinfo::cpuinfo unofficial::pthreadpool
   )
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFLITE_BUILD_WITH_XNNPACK_DELEGATE")
 endif()
@@ -452,6 +564,12 @@ if(CMAKE_SYSTEM_NAME MATCHES "Android")
   list(APPEND TFLITE_PROFILER_SRCS
     ${TFLITE_SOURCE_DIR}/profiling/atrace_profiler.cc
   )
+elseif(APPLE)
+  list(APPEND TFLITE_PROFILER_SRCS
+    ${TFLITE_SOURCE_DIR}/profiling/signpost_profiler.h ${TFLITE_SOURCE_DIR}/profiling/signpost_profiler.mm
+  )
+  add_compile_definitions(TFLITE_ENABLE_DEFAULT_PROFILER)
+  list(APPEND TFLITE_TARGET_DEPENDENCIES "-framework Foundation")
 endif()
 
 # Common include directories
@@ -494,23 +612,24 @@ add_library(tensorflow-lite
 )
 target_include_directories(tensorflow-lite
   PUBLIC
-    ${TFLITE_INCLUDE_DIRS}
+    $<BUILD_INTERFACE:${TFLITE_INCLUDE_DIRS}>
+    $<BUILD_INTERFACE:${COREML_SOURCE_DIR}> $<BUILD_INTERFACE:${TFLITE_SOURCE_DIR}/delegates/gpu/common> $<BUILD_INTERFACE:${TFLITE_SOURCE_DIR}/delegates/gpu/common/task>
 )
 target_link_libraries(tensorflow-lite
   PUBLIC
     Eigen3::Eigen
-    NEON_2_SSE
+    NEON_2_SSE::NEON_2_SSE
     absl::flags
     absl::hash
     absl::status
     absl::strings
     absl::synchronization
     absl::variant
-    farmhash
-    fft2d_fftsg2d
-    flatbuffers
-    gemmlowp
-    ruy
+    ${FARMHASH_LIBPATH}
+    ${FFT2D_SG2D_LIBPATH} ${FFT2D_SG_LIBPATH}
+    flatbuffers::flatbuffers
+    gemmlowp::gemmlowp
+    ruy::ruy
     ${CMAKE_DL_LIBS}
     ${TFLITE_TARGET_DEPENDENCIES}
 )
@@ -519,12 +638,72 @@ if (NOT BUILD_SHARED_LIBS)
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFL_STATIC_LIBRARY_BUILD")
 endif()
 
+# Moved from tensorflow/lite/c/CMakeLists.txt
+if (WIN32)
+  target_compile_definitions(tensorflow-lite PRIVATE TFL_COMPILE_LIBRARY)
+  target_compile_options(tensorflow-lite PRIVATE /Zc:__cplusplus)
+  target_link_libraries(tensorflow-lite PRIVATE Kernel32) # for UWP
+elseif (APPLE)
+  target_link_options(tensorflow-lite PRIVATE "-Wl,-exported_symbols_list,${TENSORFLOW_SOURCE_DIR}/tensorflow/lite/c/exported_symbols.lds")
+else ()
+  target_link_options(tensorflow-lite PRIVATE "-Wl,--version-script,${TENSORFLOW_SOURCE_DIR}/tensorflow/lite/c/version_script.lds")
+endif()
+
 target_compile_options(tensorflow-lite
   PUBLIC ${TFLITE_TARGET_PUBLIC_OPTIONS}
   PRIVATE ${TFLITE_TARGET_PRIVATE_OPTIONS}
 )
 add_library(tensorflow::tensorflowlite ALIAS tensorflow-lite)
 
+# C API
+install(DIRECTORY   ${TFLITE_SOURCE_DIR}/c
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite
+        FILES_MATCHING PATTERN "*.h"
+)
+install(FILES ${TFLITE_SOURCE_DIR}/builtin_ops.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite
+)
+install(FILES ${TF_SOURCE_DIR}/core/public/version.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/core/public
+)
+
+# Delegate
+install(FILES  ${TFLITE_SOURCE_DIR}/delegates/gpu/delegate.h
+               ${TFLITE_SOURCE_DIR}/delegates/gpu/cl/gpu_api_delegate.h
+               ${TFLITE_SOURCE_DIR}/delegates/gpu/gl_delegate.h
+               ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/gpu
+)
+
+# Delegate: XNNPack
+install(FILES  ${TFLITE_SOURCE_DIR}/delegates/xnnpack/xnnpack_delegate.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/xnnpack
+)
+
+# Delegate: Apple CoreML
+install(FILES  ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/coreml
+)
+
+# Delegate: NNAPI
+install(FILES  ${TFLITE_SOURCE_DIR}/nnapi/NeuralNetworksTypes.h
+               ${TFLITE_SOURCE_DIR}/nnapi/NeuralNetworksShim.h
+               ${TFLITE_SOURCE_DIR}/nnapi/nnapi_implementation.h
+               ${TFLITE_SOURCE_DIR}/nnapi/nnapi_util.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/nnapi
+)
+install(FILES  ${TFLITE_SOURCE_DIR}/delegates/nnapi/nnapi_delegate.h
+        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensorflow/lite/delegates/nnapi
+)
+
+# Build Targets
+install(TARGETS tensorflow-lite
+        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
+        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+)
+
+return() # Discard the other targets
 # The kernel tests.
 if(TFLITE_KERNEL_TEST)
   enable_testing()
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index e1d506e7..2324c18b 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -429,8 +429,11 @@ if(TFLITE_ENABLE_GPU)
       ${TFLITE_DELEGATES_METAL_SRCS}
     )
     target_include_directories(metal_delegate PUBLIC
-      ${CMAKE_BINARY_DIR}/abseil-cpp
-      ${CMAKE_BINARY_DIR}/flatbuffers/include
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/common/task
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/common
+    )
+    target_link_libraries(metal_delegate PUBLIC
+      flatbuffers::flatbuffers absl::base
     )
 
     #
@@ -451,12 +454,14 @@ if(TFLITE_ENABLE_GPU)
    foreach(lib_name ${CC_SRCS})
      set_source_files_properties(${METAL_DELEGATE_PATH}${lib_name}.cc  PROPERTIES LANGUAGE OBJCXX)
      add_library("${lib_name}" STATIC ${METAL_DELEGATE_PATH}${lib_name}.cc)
-     target_include_directories("${lib_name}" PUBLIC
-       ${CMAKE_BINARY_DIR}/abseil-cpp
-       ${CMAKE_BINARY_DIR}/flatbuffers/include
-     )
+     target_include_directories(${lib_name} PUBLIC
+       ${TFLITE_SOURCE_DIR}/delegates/gpu/common/task
+       ${TFLITE_SOURCE_DIR}/delegates/gpu/common
+     )
      set_target_properties(${lib_name} PROPERTIES LINKER_LANGUAGE OBJCXX)
-     target_link_libraries(${lib_name})
+     target_link_libraries(${lib_name} PUBLIC
+       flatbuffers::flatbuffers absl::base
+     )
    endforeach()
 
    list(APPEND MM_SRCS
@@ -465,11 +470,13 @@ if(TFLITE_ENABLE_GPU)
    )
    foreach(lib_name ${MM_SRCS})
      add_library("${lib_name}" STATIC ${METAL_DELEGATE_PATH}${lib_name}.mm)
-     target_include_directories("${lib_name}" PUBLIC
-       ${CMAKE_BINARY_DIR}/abseil-cpp
-       ${CMAKE_BINARY_DIR}/flatbuffers/include
+     target_include_directories(${lib_name} PUBLIC
+       ${TFLITE_SOURCE_DIR}/delegates/gpu/common/task
+       ${TFLITE_SOURCE_DIR}/delegates/gpu/common
+     )
+     target_link_libraries(${lib_name} PUBLIC
+       flatbuffers::flatbuffers absl::base
      )
-     target_link_libraries(${lib_name})
    endforeach()
 endif()
   list(APPEND TFLITE_TARGET_DEPENDENCIES
@@ -619,6 +626,7 @@ target_link_libraries(tensorflow-lite
   PUBLIC
     Eigen3::Eigen
     NEON_2_SSE::NEON_2_SSE
+    absl::span
     absl::flags
     absl::hash
     absl::status
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index efa0798d..3780312b 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -417,7 +417,7 @@ if(TFLITE_ENABLE_GPU)
     ${TFLITE_SOURCE_DIR}/tools/versioning/gpu_compatibility.cc
     ${TFLITE_SOURCE_DIR}/tools/versioning/op_signature.cc
   )
-  if(TFLITE_ENABLE_METAL AND "${CMAKE_SYSTEM_NAME}" STREQUAL "Darwin")
+  if(TFLITE_ENABLE_METAL AND APPLE)
     #
     # libmetal_delegate library
     #
