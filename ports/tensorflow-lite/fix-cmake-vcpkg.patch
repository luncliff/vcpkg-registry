diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 7ee0d64e..7360c1de 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -51,14 +51,7 @@ endif()
 set(TF_SOURCE_DIR "${TENSORFLOW_SOURCE_DIR}/tensorflow")
 set(TSL_SOURCE_DIR "${TENSORFLOW_SOURCE_DIR}/third_party/xla/third_party/tsl")
 set(TFLITE_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}")
-set(CMAKE_MODULE_PATH
-  "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
-  ${CMAKE_MODULE_PATH}
-)
-set(CMAKE_PREFIX_PATH
-  "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
-  ${CMAKE_PREFIX_PATH}
-)
+
 include(GNUInstallDirs)
 include(CMakeDependentOption)
 option(TFLITE_ENABLE_INSTALL "Enable install rule" OFF)
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 7360c1de..6e206ca7 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -76,7 +76,7 @@ if(TFLITE_KERNEL_TEST AND ${CMAKE_CROSSCOMPILING})
   endif()
 endif()
 
-set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 set(_TFLITE_ENABLE_RUY "${TFLITE_ENABLE_RUY}")
 if("${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
@@ -275,9 +275,11 @@ populate_tflite_source_vars("core/tools" TFLITE_CORE_TOOLS_SRCS)
 populate_tflite_source_vars("c" TFLITE_C_SRCS)
 populate_tflite_source_vars("delegates" TFLITE_DELEGATES_SRCS)
 if(TFLITE_ENABLE_GPU)
-  find_package(opencl_headers REQUIRED)
-  find_package(vulkan_headers REQUIRED)
-  find_package(fp16_headers REQUIRED)
+  find_package(OpenCL REQUIRED) # OpenCL::OpenCL
+  find_package(Vulkan COMPONENTS Headers) # Vulkan::Headers Vulkan::Vulkan
+  if(Vulkan_FOUND)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES Vulkan::Headers)
+  endif(Vulkan_FOUND)
   # Android NDK already has OpenGL, EGL headers.
   if(TFLITE_ENABLE_GLES3)
     find_path(OPENGL_EGL_INCLUDE_DIRS "EGL/egl.h" REQUIRED)
@@ -325,7 +327,11 @@ if(TFLITE_ENABLE_GPU)
       COMMAND ${FLATC} --cpp --scoped-enums -I ${TENSORFLOW_SOURCE_DIR} workgroups.fbs
       COMMAND ${FLATC} --cpp --scoped-enums -I ${TENSORFLOW_SOURCE_DIR} compiled_model.fbs
     )
-    populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(_test)\\.(cc|h)$")
+    if(ANDROID)
+      populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(_test)\\.(cc|h)$")
+    else()
+      populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(android_sync|_test)\\.(cc|h)$")
+    endif()
     populate_tflite_source_vars("delegates/gpu/gl/compiler" TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS FILTER "(_test)\\.(cc|h)$")
     populate_tflite_source_vars("delegates/gpu/gl/converters" TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS FILTER "(_test)\\.(cc|h)$")
     populate_tflite_source_vars("delegates/gpu/gl/kernels" TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS FILTER "(_test)\\.(cc|h)$")
@@ -524,7 +530,7 @@ endif()
   )
 endif()
 if(_TFLITE_ENABLE_NNAPI)
-  find_package(fp16_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
   populate_tflite_source_vars("delegates/nnapi"
     TFLITE_DELEGATES_NNAPI_SRCS
     FILTER "(_test_list|_disabled)\\.(cc|h)$"
@@ -549,14 +555,14 @@ else()
   )
 endif()
 if(TFLITE_ENABLE_XNNPACK)
-  find_package(fp16_headers REQUIRED)
-  find_package(XNNPACK REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
+  find_package(xnnpack CONFIG REQUIRED) # xnnpack
   populate_tflite_source_vars("delegates/xnnpack"
     TFLITE_DELEGATES_XNNPACK_SRCS
     FILTER ".*(_test|_tester)\\.(cc|h)"
   )
   list(APPEND TFLITE_TARGET_DEPENDENCIES
-    XNNPACK
+    xnnpack
   )
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFLITE_BUILD_WITH_XNNPACK_DELEGATE")
 endif()
@@ -792,6 +798,7 @@ if(TFLITE_ENABLE_INSTALL)
   )
 endif()
 
+return()
 # The kernel tests.
 if(TFLITE_KERNEL_TEST)
   enable_testing()
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 6e206ca7..72933afd 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -249,6 +249,7 @@ if(_TFLITE_ENABLE_MMAP)
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*mmap_allocation_disabled\\.cc$")
 else()
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*mmap_allocation\\.cc$")
+  add_compile_definitions(TFLITE_MMAP_DISABLED)
 endif()
 
 # Handle TFLite logging source.
diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 72933afd..8f6fa5f6 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -541,9 +541,19 @@ if(_TFLITE_ENABLE_NNAPI)
   )
 
   list(APPEND TFLITE_NNAPI_SRCS
+    "${TF_SOURCE_DIR}/../third_party/xla/third_party/tsl/tsl/platform/default/logging.cc"
+    "${TF_SOURCE_DIR}/../third_party/xla/third_party/tsl/tsl/platform/default/mutex.cc"
     "${TFLITE_SOURCE_DIR}/nnapi/sl/SupportLibrary.cc"
   )
 
+  # tsl::mutex requires nsync_cpp
+  find_library(NSYNC_LIBRARY NAMES nsync_cpp REQUIRED)
+  list(APPEND TFLITE_TARGET_DEPENDENCIES ${NSYNC_LIBRARY})
+
+  # disable ml_dtypes/float8.h which requries libeigen3 master branch ...
+  set_source_files_properties(${TFLITE_NNAPI_SRCS} PROPERTIES
+    COMPILE_DEFINITIONS "TENSORFLOW_TSL_PLATFORM_FLOAT8_H_;TENSORFLOW_CORE_PLATFORM_FLOAT8_H_"
+  )
   if(${TFLITE_ENABLE_NNAPI_VERBOSE_VALIDATION})
     list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DNNAPI_VERBOSE_VALIDATION")
   endif()
