diff --git a/tensorflow/lite/delegates/xnnpack/weight_cache.cc b/tensorflow/lite/delegates/xnnpack/weight_cache.cc
index aa730738..3023167c 100644
--- a/tensorflow/lite/delegates/xnnpack/weight_cache.cc
+++ b/tensorflow/lite/delegates/xnnpack/weight_cache.cc
@@ -20,6 +20,7 @@ limitations under the License.
 #if defined(_MSC_VER)
 #include <io.h>
 #define F_OK 0
+#pragma warning(disable:4996)
 #else
 #include <sys/mman.h>
 #include <unistd.h>
diff --git a/third_party/xla/third_party/tsl/tsl/platform/ml_dtypes.h b/third_party/xla/third_party/tsl/tsl/platform/ml_dtypes.h
index 916be8db..e2df0d5f 100644
--- a/third_party/xla/third_party/tsl/tsl/platform/ml_dtypes.h
+++ b/third_party/xla/third_party/tsl/tsl/platform/ml_dtypes.h
@@ -16,8 +16,8 @@ limitations under the License.
 #ifndef TENSORFLOW_TSL_PLATFORM_ML_DTYPES_H_
 #define TENSORFLOW_TSL_PLATFORM_ML_DTYPES_H_
 
-#include "ml_dtypes/include/float8.h"  // from @ml_dtypes
-#include "ml_dtypes/include/intn.h"  // from @ml_dtypes
+#include "ml_dtypes/float8.h"  // from @ml_dtypes
+#include "ml_dtypes/intn.h"  // from @ml_dtypes
 
 namespace tsl {
 using float8_e4m3fn = ::ml_dtypes::float8_e4m3fn;
diff --git a/tensorflow/lite/delegates/gpu/cl/opencl_wrapper.h b/tensorflow/lite/delegates/gpu/cl/opencl_wrapper.h
index cbdf46a0..c5cd674b 100644
--- a/tensorflow/lite/delegates/gpu/cl/opencl_wrapper.h
+++ b/tensorflow/lite/delegates/gpu/cl/opencl_wrapper.h
@@ -544,10 +544,11 @@ typedef cl_int(CL_API_CALL *PFN_clEnqueueCommandBufferKHR)(
     cl_uint /*num_events_in_wait_list*/, const cl_event * /*event_wait_list*/,
     cl_event * /*event*/);
 
+#if defined(CL_KHR_COMMAND_BUFFER_EXTENSION_VERSION) // CL_MAKE_VERSION(0, 9, 5)
 typedef cl_int(CL_API_CALL *PFN_clCommandNDRangeKernelKHR)(
     cl_command_buffer_khr /*command_buffer*/,
     cl_command_queue /*command_queue*/,
-    const cl_ndrange_kernel_command_properties_khr * /*properties*/,
+    const cl_command_buffer_flags_khr * /*properties*/, // new in OpenCL 2024.10.24
     cl_kernel /*kernel*/, cl_uint /*work_dim*/,
     const size_t * /*global_work_offset*/, const size_t * /*global_work_size*/,
     const size_t * /*local_work_size*/,
@@ -555,6 +556,19 @@ typedef cl_int(CL_API_CALL *PFN_clCommandNDRangeKernelKHR)(
     const cl_sync_point_khr * /*sync_point_wait_list*/,
     cl_sync_point_khr * /*sync_point*/,
     cl_mutable_command_khr * /*mutable_handle*/);
+#else // for OpenCL 2024.05.08
+typedef cl_int(CL_API_CALL *PFN_clCommandNDRangeKernelKHR)(
+    cl_command_buffer_khr /*command_buffer*/,
+    cl_command_queue /*command_queue*/,
+    const cl_ndrange_kernel_command_properties_khr * /*properties*/, // renamed to cl_command_buffer_flags_khr in OpenCL 2024.10.24
+    cl_kernel /*kernel*/, cl_uint /*work_dim*/,
+    const size_t * /*global_work_offset*/, const size_t * /*global_work_size*/,
+    const size_t * /*local_work_size*/,
+    cl_uint /*num_sync_points_in_wait_list*/,
+    const cl_sync_point_khr * /*sync_point_wait_list*/,
+    cl_sync_point_khr * /*sync_point*/,
+    cl_mutable_command_khr * /*mutable_handle*/);
+#endif
 
 typedef cl_int(CL_API_CALL *PFN_clGetCommandBufferInfoKHR)(
     cl_command_buffer_khr /*command_buffer*/,
