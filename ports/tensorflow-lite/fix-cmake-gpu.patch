diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index 9e6d4722..eec76573 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -227,13 +227,140 @@ populate_tflite_source_vars("core/api" TFLITE_CORE_API_SRCS)
 populate_tflite_source_vars("c" TFLITE_C_SRCS)
 populate_tflite_source_vars("delegates" TFLITE_DELEGATES_SRCS)
 if(TFLITE_ENABLE_GPU)
-  find_package(opencl_headers REQUIRED)
-  find_package(vulkan_headers REQUIRED)
-  find_package(fp16_headers REQUIRED)
-  # Android NDK already has OpenGL, EGL headers.
-  if(NOT "${CMAKE_SYSTEM_NAME}" STREQUAL "Android")
-    find_package(opengl_headers REQUIRED)
-    find_package(egl_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
+  if(APPLE)
+    # Prevent using OpenCL.framework because we need version 2.0+
+    find_path(OpenCL_INCLUDE_DIR "CL/opencl.h" REQUIRED)
+    find_library(OpenCL_LIBRARY NAMES OpenCL REQUIRED NO_CMAKE_SYSTEM_PATH)
+  endif()
+  if(ANDROID)
+    find_path(OpenCL_INCLUDE_DIR "CL/opencl.h" REQUIRED)
+  else()
+    find_package(OpenCL REQUIRED)
+  endif()
+  find_program(FLATC_EXECUTABLE NAMES flatc REQUIRED)
+  add_custom_target(gl_delegate_codegen
+    COMMAND ${FLATC_EXECUTABLE} --cpp --scoped-enums common.fbs # gl/common_generated.h
+    COMMAND ${FLATC_EXECUTABLE} --cpp --scoped-enums metadata.fbs # gl/metadata_generated.h
+    COMMAND ${FLATC_EXECUTABLE} --cpp --scoped-enums workgroups.fbs # gl/workgroups_generated.h
+    COMMAND ${FLATC_EXECUTABLE} --cpp --scoped-enums compiled_model.fbs # gl/compiled_model_generated.h
+    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/delegates/gpu/gl
+  )
+  find_package(Vulkan)
+  if(Vulkan_FOUND)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES Vulkan::Headers)
+  endif()
+  if(WIN32 OR ANDROID) # OpenGL, EGL headers will be installed with vcpkg
+    find_library(EGL_LIBPATH NAMES libEGL EGL REQUIRED)
+    find_library(GLES_LIBPATH NAMES libGLESv3${CMAKE_DEBUG_POSTFIX} GLESv3 libGLESv2${CMAKE_DEBUG_POSTFIX} GLESv2 REQUIRED)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES ${EGL_LIBPATH} ${GLES_LIBPATH})
+    list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DEGL_EGLEXT_PROTOTYPES" "-DEGL_NO_X11")
+  elseif(APPLE)
+    enable_language(OBJC)
+    enable_language(OBJCXX)
+    set(CMAKE_OBJC_STANDARD 11)
+    set(CMAKE_OBJCXX_STANDARD 14)
+    list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL")
+    # note: compile option "-fobjc-arc" is required for Objective C/C++ sources.
+  endif()
+
+  if(WIN32 OR ANDROID)
+    populate_tflite_source_vars(
+      "delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS
+      FILTER "(_test)\\.(cc|h)$"
+    )
+    populate_tflite_source_vars(
+      "delegates/gpu/gl/compiler" TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS
+      FILTER "(_test)\\.(cc|h)$"
+    )
+    populate_tflite_source_vars(
+      "delegates/gpu/gl/converters" TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS
+      FILTER "(_test)\\.(cc|h)$"
+    )
+    populate_tflite_source_vars(
+      "delegates/gpu/gl/kernels" TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS
+      FILTER "(_test)\\.(cc|h)$"
+    )
+    populate_tflite_source_vars(
+      "delegates/gpu/gl/runtime" TFLITE_DELEGATES_GPU_GL_RUNTIME_SRCS
+      FILTER "(_test)\\.(cc|h)$"
+    )
+    populate_tflite_source_vars(
+      "delegates/gpu/gl/workgroups" TFLITE_DELEGATES_GPU_GL_WORKGROUPS_SRCS
+      FILTER "(_test)\\.(cc|h)$"
+    )
+    list(APPEND TFLITE_DELEGATES_GPU_EGL_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/cl/egl_sync.cc
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/cl/gl_interop.cc
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/gl_delegate.cc
+    )
+  elseif(APPLE)
+    find_package(Protobuf REQUIRED)
+    find_program(PROTOC_EXECUTABLE NAMES protoc REQUIRED)
+    # CoreML .proto files from https://github.com/apple/coremltools
+    file(GLOB COREML_MLMODEL_FORMAT_PROTO_FILES "${COREML_SOURCE_DIR}/mlmodel/format/*.proto")
+    protobuf_generate(
+        LANGUAGE cpp
+        IMPORT_DIRS ${COREML_SOURCE_DIR}/mlmodel/format
+        PROTOC_OUT_DIR ${COREML_SOURCE_DIR}/mlmodel/format
+        PROTOS ${COREML_MLMODEL_FORMAT_PROTO_FILES}
+        OUT_VAR COREML_MLMODEL_FORMAT_PROTO_SRCS
+    )
+    populate_tflite_source_vars(
+      "delegates/gpu/metal" TFLITE_DELEGATES_GPU_METAL_CXX_SRCS
+      FILTER "(_test)\\.(m|mm|cc|h)$"
+    )
+    set_source_files_properties(${TFLITE_DELEGATES_GPU_METAL_CXX_SRCS}
+    PROPERTIES
+      LANGUAGE OBJCXX
+      COMPILE_OPTIONS "-fobjc-arc"
+    )
+    list(APPEND TFLITE_OBJC_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/buffer_convert.mm
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLCoreMLDelegate.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLInterpreter+Internal.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLQuantizationParameters+Internal.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLDelegate.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLInterpreter.mm
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLQuantizationParameters.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLErrorUtil.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLInterpreterOptions.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLTensor+Internal.h
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLErrorUtil.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLMetalDelegate.m
+      ${TFLITE_SOURCE_DIR}/objc/sources/TFLTensor.m
+    )
+    list(APPEND TFLITE_DELEGATES_GPU_METAL_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/common.h
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal/common.mm
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate_internal.h
+      ${TFLITE_SOURCE_DIR}/delegates/gpu/metal_delegate.mm
+    )
+    populate_tflite_source_vars(
+      "delegates/coreml/builders" TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS
+      FILTER "(_test)\\.(m|mm|cc|h)$"
+    )
+    set_source_files_properties(${TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS}
+    PROPERTIES
+      LANGUAGE OBJCXX
+      COMPILE_OPTIONS "-fobjc-arc"
+    )
+    list(APPEND TFLITE_DELEGATES_COREML_SRCS
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate.h
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate.mm
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate_kernel.h
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_delegate_kernel.mm
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_executor.h
+      ${TFLITE_SOURCE_DIR}/delegates/coreml/coreml_executor.mm
+      ${TFLITE_SOURCE_DIR}/tools/delegates/coreml_delegate_provider.cc
+      ${TFLITE_SOURCE_DIR}/tools/tool_params.cc
+      ${TFLITE_SOURCE_DIR}/tools/command_line_flags.cc
+    )
+    set_source_files_properties(${TFLITE_OBJC_SRCS} ${TFLITE_DELEGATES_GPU_METAL_SRCS} ${TFLITE_DELEGATES_COREML_SRCS}
+    PROPERTIES
+      COMPILE_OPTIONS "-fobjc-arc"
+    )
+    list(APPEND TFLITE_TARGET_DEPENDENCIES "-framework Foundation" "-framework Metal" "-framework CoreML" protobuf::libprotobuf)
   endif()
   populate_tflite_source_vars(
     "delegates/gpu/cl" TFLITE_DELEGATES_GPU_CL_SRCS
@@ -362,14 +489,14 @@ if(TFLITE_ENABLE_GPU)
      target_link_libraries(${lib_name})
    endforeach()
 endif()
-  list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL" "-DEGL_NO_X11")
   list(APPEND TFLITE_TARGET_DEPENDENCIES
     absl::any
     absl::flat_hash_map
+    ${OpenCL_LIBRARY} # OpenCL::OpenCL
   )
 endif()
 if(_TFLITE_ENABLE_NNAPI)
-  find_package(fp16_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
   populate_tflite_source_vars("delegates/nnapi"
     TFLITE_DELEGATES_NNAPI_SRCS
     FILTER "(_test_list|_disabled)\\.(cc|h)$"
@@ -490,6 +617,7 @@ add_library(tensorflow-lite
 target_include_directories(tensorflow-lite
   PUBLIC
     $<BUILD_INTERFACE:${TFLITE_INCLUDE_DIRS}>
+    $<BUILD_INTERFACE:${COREML_SOURCE_DIR}>
 )
 target_link_libraries(tensorflow-lite
   PUBLIC
@@ -419,6 +419,8 @@ if(TFLITE_ENABLE_GPU)
     ${TFLITE_SOURCE_DIR}/delegates/gpu/api.cc
     ${TFLITE_SOURCE_DIR}/delegates/gpu/delegate.cc
     ${TFLITE_SOURCE_DIR}/experimental/acceleration/compatibility/android_info.cc
+    ${TFLITE_DELEGATES_GPU_EGL_SRCS} ${TFLITE_DELEGATES_GPU_GL_SRCS} ${TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS} ${TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS} ${TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS} ${TFLITE_DELEGATES_GPU_GL_RUNTIME_SRCS} ${TFLITE_DELEGATES_GPU_GL_WORKGROUPS_SRCS}
+    ${TFLITE_DELEGATES_GPU_METAL_CXX_SRCS} ${TFLITE_DELEGATES_GPU_METAL_SRCS} ${TFLITE_DELEGATES_COREML_BUILDERS_CXX_SRCS} ${TFLITE_DELEGATES_COREML_BUILDERS_SRCS} ${TFLITE_DELEGATES_COREML_SRCS} ${TFLITE_DELEGATES_COREML_PROVIDER_SRCS} ${COREML_MLMODEL_FORMAT_PROTO_SRCS} ${TFLITE_OBJC_SRCS}
     ${TFLITE_DELEGATES_GPU_CL_SRCS}
     ${TFLITE_DELEGATES_GPU_CL_DEFAULT_SRCS}
     ${TFLITE_DELEGATES_GPU_CL_KERNELS_SRCS}
