diff --git a/tensorflow/lite/delegates/gpu/gl/runtime.cc b/tensorflow/lite/delegates/gpu/gl/runtime.cc
index ce029efa..213a4134 100644
--- a/tensorflow/lite/delegates/gpu/gl/runtime.cc
+++ b/tensorflow/lite/delegates/gpu/gl/runtime.cc
@@ -86,27 +86,22 @@ absl::Status MakeGlTexture(const Object& object, const ObjectData& data,
       if (data.size() % 2 != 0) {
         return absl::InvalidArgumentError("Texture size is not aligned");
       }
-      return absl::visit(
-          TextureF16Maker{
-              .data = absl::MakeConstSpan(
-                  reinterpret_cast<const uint16_t*>(data.data()),
-                  data.size() / 2),
-              .gl_texture = gl_texture,
-          },
-          object.size);
+      TextureF16Maker maker{};
+      maker.data = absl::MakeConstSpan(
+          reinterpret_cast<const uint16_t*>(data.data()), data.size() / 2);
+      maker.gl_texture = gl_texture;
+      return absl::visit(maker, object.size);
     }
     case DataType::FLOAT32: {
       if (data.size() % sizeof(float) != 0) {
         return absl::InvalidArgumentError("Texture size is not aligned");
       }
-      return absl::visit(
-          TextureF32Maker{
-              .data = absl::MakeConstSpan(
-                  reinterpret_cast<const float*>(data.data()),
-                  data.size() / sizeof(float)),
-              .gl_texture = gl_texture,
-          },
-          object.size);
+      TextureF32Maker maker{};
+      maker.data =
+          absl::MakeConstSpan(reinterpret_cast<const float*>(data.data()),
+                              data.size() / sizeof(float));
+      maker.gl_texture = gl_texture;
+      return absl::visit(maker, object.size);
     }
     default:
       return absl::InvalidArgumentError("Unsupported textures data type.");
