diff --git a/tensorflow/lite/CMakeLists.txt b/tensorflow/lite/CMakeLists.txt
index b7f24472..ab25a8df 100644
--- a/tensorflow/lite/CMakeLists.txt
+++ b/tensorflow/lite/CMakeLists.txt
@@ -50,14 +50,7 @@ if(NOT TENSORFLOW_SOURCE_DIR)
 endif()
 set(TF_SOURCE_DIR "${TENSORFLOW_SOURCE_DIR}/tensorflow")
 set(TFLITE_SOURCE_DIR "${CMAKE_CURRENT_LIST_DIR}")
-set(CMAKE_MODULE_PATH
-  "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
-  ${CMAKE_MODULE_PATH}
-)
-set(CMAKE_PREFIX_PATH
-  "${TFLITE_SOURCE_DIR}/tools/cmake/modules"
-  ${CMAKE_PREFIX_PATH}
-)
+# CMake modules/scripts are replaced to vcpkg portfile patches
 include(GNUInstallDirs)
 include(CMakeDependentOption)
 option(TFLITE_ENABLE_INSTALL "Enable install rule" OFF)
@@ -143,6 +136,7 @@ set(OVERRIDABLE_FETCH_CONTENT_LICENSE_CHECK ON)
 # Additional library dependencies based upon enabled features.
 set(TFLITE_TARGET_DEPENDENCIES "")
 # Find TensorFlow Lite dependencies.
+find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
 find_package(absl REQUIRED)
 find_package(Eigen3 REQUIRED)
 find_package(farmhash REQUIRED)
@@ -256,6 +249,7 @@ if(_TFLITE_ENABLE_MMAP)
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*mmap_allocation_disabled\\.cc$")
 else()
   list(FILTER TFLITE_SRCS EXCLUDE REGEX ".*mmap_allocation\\.cc$")
+  list(APPEND TFLITE_TARGET_PRIVATE_DEFINITIONS "TFLITE_MMAP_DISABLED")
 endif()
 
 # Handle TFLite logging source.
@@ -282,9 +276,11 @@ populate_tflite_source_vars("core/tools" TFLITE_CORE_TOOLS_SRCS)
 populate_tflite_source_vars("c" TFLITE_C_SRCS)
 populate_tflite_source_vars("delegates" TFLITE_DELEGATES_SRCS)
 if(TFLITE_ENABLE_GPU)
-  find_package(opencl_headers REQUIRED)
-  find_package(vulkan_headers REQUIRED)
-  find_package(fp16_headers REQUIRED)
+  find_package(OpenCL REQUIRED) # OpenCL::OpenCL
+  find_package(Vulkan COMPONENTS Headers) # Vulkan::Headers
+  if(Vulkan_FOUND)
+    list(APPEND TFLITE_TARGET_DEPENDENCIES Vulkan::Headers)
+  endif()
   # Android NDK already has OpenGL, EGL headers.
   if(TFLITE_ENABLE_GLES3)
     find_path(OPENGL_EGL_INCLUDE_DIRS "EGL/egl.h" REQUIRED)
@@ -296,9 +292,6 @@ if(TFLITE_ENABLE_GPU)
     # OpenGL::GLES3 requires CMake 3.27
     find_package(OpenGL REQUIRED COMPONENTS GLES3)
     list(APPEND TFLITE_TARGET_DEPENDENCIES OpenGL::GLES3 ${OPENGL_egl_LIBRARY})
-  else()
-    find_package(opengl_headers REQUIRED)
-    find_package(egl_headers REQUIRED)
   endif()
   # see delegates/gpu/BUILD and search with //tensorflow:android
   if(ANDROID)
@@ -332,7 +325,11 @@ if(TFLITE_ENABLE_GPU)
       COMMAND ${FLATC} --cpp --scoped-enums -I ${TENSORFLOW_SOURCE_DIR} workgroups.fbs
       COMMAND ${FLATC} --cpp --scoped-enums -I ${TENSORFLOW_SOURCE_DIR} compiled_model.fbs
     )
-    populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(_test)\\.(cc|h)$")
+    if(ANDROID)
+      populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(_test)\\.(cc|h)$")
+    else()
+      populate_tflite_source_vars("delegates/gpu/gl" TFLITE_DELEGATES_GPU_GL_SRCS FILTER "(_test|android_sync)\\.(cc|h)$")
+    endif()
     populate_tflite_source_vars("delegates/gpu/gl/compiler" TFLITE_DELEGATES_GPU_GL_COMPILER_SRCS FILTER "(_test)\\.(cc|h)$")
     populate_tflite_source_vars("delegates/gpu/gl/converters" TFLITE_DELEGATES_GPU_GL_CONVERTERS_SRCS FILTER "(_test)\\.(cc|h)$")
     populate_tflite_source_vars("delegates/gpu/gl/kernels" TFLITE_DELEGATES_GPU_GL_KERNELS_SRCS FILTER "(_test)\\.(cc|h)$")
@@ -524,14 +521,16 @@ if(TFLITE_ENABLE_GPU)
      target_link_libraries(${lib_name})
    endforeach()
 endif()
-  list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DCL_DELEGATE_NO_GL" "-DEGL_NO_X11")
-  list(APPEND TFLITE_TARGET_DEPENDENCIES
+  list(APPEND TFLITE_TARGET_PRIVATE_DEFINITIONS "EGL_NO_X11")
+  message(STATUS "Using CL_TARGET_OPENCL_VERSION: ${OpenCL_VERSION_MAJOR}${OpenCL_VERSION_MINOR}0")
+  list(APPEND TFLITE_TARGET_PRIVATE_DEFINITIONS "CL_TARGET_OPENCL_VERSION=${OpenCL_VERSION_MAJOR}${OpenCL_VERSION_MINOR}0")
+  list(APPEND TFLITE_TARGET_DEPENDENCIES OpenCL::OpenCL
     absl::any
     absl::flat_hash_map
   )
 endif()
 if(_TFLITE_ENABLE_NNAPI)
-  find_package(fp16_headers REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
   populate_tflite_source_vars("delegates/nnapi"
     TFLITE_DELEGATES_NNAPI_SRCS
     FILTER "(_test_list|_disabled)\\.(cc|h)$"
@@ -556,14 +555,14 @@ else()
   )
 endif()
 if(TFLITE_ENABLE_XNNPACK)
-  find_package(fp16_headers REQUIRED)
-  find_package(XNNPACK REQUIRED)
+  find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
+  find_library(XNNPACK_LIBRARY NAMES XNNPACK REQUIRED)
   populate_tflite_source_vars("delegates/xnnpack"
     TFLITE_DELEGATES_XNNPACK_SRCS
     FILTER ".*(_test|_tester)\\.(cc|h)"
   )
   list(APPEND TFLITE_TARGET_DEPENDENCIES
-    XNNPACK
+    ${XNNPACK_LIBRARY}
   )
   list(APPEND TFLITE_TARGET_PUBLIC_OPTIONS "-DTFLITE_BUILD_WITH_XNNPACK_DELEGATE")
 endif()
@@ -697,9 +696,10 @@ set(_ALL_TFLITE_HDRS ${_ALL_TFLITE_SRCS})
 list(FILTER _ALL_TFLITE_HDRS INCLUDE REGEX ".*\\.h$")
 target_include_directories(tensorflow-lite
   PUBLIC $<BUILD_INTERFACE:${TENSORFLOW_SOURCE_DIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+  PRIVATE ${FP16_INCLUDE_DIRS}
 )
 target_link_libraries(tensorflow-lite
-  PUBLIC
+  PRIVATE
     Eigen3::Eigen
     absl::flags
     absl::hash
@@ -713,7 +713,7 @@ target_link_libraries(tensorflow-lite
     gemmlowp::gemmlowp
     ml_dtypes
     ruy::ruy
-    pthreadpool
+    ${PTHREADPOOL_LIB}
     ${CMAKE_DL_LIBS}
     ${TFLITE_TARGET_DEPENDENCIES}
 )
@@ -738,6 +738,7 @@ if(TFLITE_ENABLE_INSTALL)
     EXPORT ${PROJECT_NAME}Targets
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
     ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
   )
 
   foreach(hdr ${_ALL_TFLITE_HDRS})
@@ -770,6 +771,7 @@ if(TFLITE_ENABLE_INSTALL)
   )
 endif()
-
+return() # drop following targets
 # The kernel tests.
 if(TFLITE_KERNEL_TEST)
   enable_testing()
