diff --git a/CMakeLists.txt b/CMakeLists.txt
index 8eb5f88..0605981 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -48,7 +48,7 @@ option(NVBench_ENABLE_EXAMPLES "Build NVBench examples." OFF)
 option(NVBench_ENABLE_INSTALL_RULES "Install NVBench." ${NVBench_TOPLEVEL_PROJECT})
 
 include(cmake/NVBenchUtilities.cmake) # Must be first
-include(cmake/NVBenchClangdCompileInfo.cmake) # Must be before any targets are created
+# include(cmake/NVBenchClangdCompileInfo.cmake) # Must be before any targets are created
 
 include(cmake/NVBenchConfigTarget.cmake)
 include(cmake/NVBenchDependentDlls.cmake)
diff --git a/cmake/NVBenchDependencies.cmake b/cmake/NVBenchDependencies.cmake
index 8ba07fe..702e438 100644
--- a/cmake/NVBenchDependencies.cmake
+++ b/cmake/NVBenchDependencies.cmake
@@ -1,22 +1,13 @@
 ################################################################################
 # fmtlib/fmt
-include("${rapids-cmake-dir}/cpm/fmt.cmake")
+find_package(fmt CONFIG REQUIRED)
 
 if(NOT BUILD_SHARED_LIBS AND NVBench_ENABLE_INSTALL_RULES)
 set(export_set_details BUILD_EXPORT_SET nvbench-targets
                        INSTALL_EXPORT_SET nvbench-targets)
 endif()
 
-rapids_cpm_fmt(${export_set_details}
-  CPM_ARGS
-    OPTIONS
-      # Force static to keep fmt internal.
-      "BUILD_SHARED_LIBS OFF"
-)
-
-if(NOT fmt_ADDED)
-  set(fmt_is_external TRUE)
-endif()
+set(fmt_is_external TRUE) # from vcpkg
 
 ################################################################################
 # nlohmann/json
@@ -24,17 +15,7 @@ endif()
 # Following recipe from
 # http://github.com/cpm-cmake/CPM.cmake/blob/master/examples/json/CMakeLists.txt
 # Download the zips because the repo takes an excessively long time to clone.
-rapids_cpm_find(nlohmann_json 3.11.3
-  CPM_ARGS
-    URL https://github.com/nlohmann/json/releases/download/v3.11.3/include.zip
-    URL_HASH SHA256=a22461d13119ac5c78f205d3df1db13403e58ce1bb1794edc9313677313f4a9d
-  PATCH_COMMAND
-    ${CMAKE_COMMAND}
-      -D "CUDA_VERSION=${CMAKE_CUDA_COMPILER_VERSION}"
-      -D "CXX_VERSION=${CMAKE_CXX_COMPILER_VERSION}"
-      -D "CXX_ID=${CMAKE_CXX_COMPILER_ID}"
-      -P "${CMAKE_CURRENT_SOURCE_DIR}/cmake/patches/json_unordered_map_ice.cmake"
-)
+find_package(nlohmann_json CONFIG REQUIRED)
 
 add_library(nvbench_json INTERFACE IMPORTED)
 if (TARGET nlohmann_json::nlohmann_json)
diff --git a/cmake/NVBenchInstallRules.cmake b/cmake/NVBenchInstallRules.cmake
index 16e9b7e..a475631 100644
--- a/cmake/NVBenchInstallRules.cmake
+++ b/cmake/NVBenchInstallRules.cmake
@@ -55,8 +55,10 @@ endif()
 function(nvbench_install_libraries)
   if(NVBench_ENABLE_INSTALL_RULES)
     install(TARGETS ${ARGN}
-      DESTINATION "${NVBench_INSTALL_LIB_DIR}"
       EXPORT nvbench-targets
+      LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
+      RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     )
   endif()
 endfunction()
diff --git a/cmake/NVBenchRapidsCMake.cmake b/cmake/NVBenchRapidsCMake.cmake
index b110ccc..a6a5e00 100644
--- a/cmake/NVBenchRapidsCMake.cmake
+++ b/cmake/NVBenchRapidsCMake.cmake
@@ -21,5 +21,5 @@ endmacro()
 macro(nvbench_init_rapids_cmake)
   rapids_cmake_build_type(Release)
   rapids_cmake_write_version_file("${NVBench_BINARY_DIR}/nvbench/detail/version.cuh")
-  rapids_cpm_init()
+  # rapids_cpm_init() # vcpkg will be used
 endmacro()
