diff --git a/onnxruntime/core/framework/kernel_type_str_resolver.cc b/onnxruntime/core/framework/kernel_type_str_resolver.cc
index d05e02e..6f8a47c 100644
--- a/onnxruntime/core/framework/kernel_type_str_resolver.cc
+++ b/onnxruntime/core/framework/kernel_type_str_resolver.cc
@@ -50,7 +50,7 @@ Status KernelTypeStrResolver::ResolveKernelTypeStr(const Node& node, std::string
   // TODO(edgchen1) maybe we can use transparent hash/eq to enable lookup with string_view
   const auto type_str_it = type_str_map.find(std::string(kernel_type_str));
 #else
-  const auto type_str_it = type_str_map.find(kernel_type_str);
+  const auto type_str_it = type_str_map.find(std::string(kernel_type_str)); // abseil::raw_hash_set fails deduction ...
 #endif
 
   ORT_RETURN_IF(type_str_it == type_str_map.end(),
diff --git a/onnxruntime/core/framework/ort_value_name_idx_map.h b/onnxruntime/core/framework/ort_value_name_idx_map.h
index 1b5f6bc..b721205 100644
--- a/onnxruntime/core/framework/ort_value_name_idx_map.h
+++ b/onnxruntime/core/framework/ort_value_name_idx_map.h
@@ -36,7 +36,7 @@ class OrtValueNameIdxMap {
 #ifdef DISABLE_ABSEIL
     auto it = map_.find(std::string(name));
 #else
-    auto it = map_.find(name);
+    auto it = map_.find(std::string(name)); // abseil::raw_hash_set fails deduction ...
 #endif
     if (it == map_.end()) {
       return ORT_MAKE_STATUS(ONNXRUNTIME, FAIL, "Could not find OrtValue with name '", name, "'");
