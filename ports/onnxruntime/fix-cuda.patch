diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index 8cf6dd1..0119493 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -663,6 +663,8 @@ set(ORT_PROVIDER_FLAGS)
 set(ORT_PROVIDER_CMAKE_FLAGS)
 
 if (onnxruntime_USE_CUDA)
+  include(CheckLanguage)
+  check_language(CUDA)
   enable_language(CUDA)
   message( STATUS "CMAKE_CUDA_COMPILER_VERSION: ${CMAKE_CUDA_COMPILER_VERSION}")
 
@@ -863,9 +865,20 @@ function(onnxruntime_set_compile_flags target_name)
     endif()
     set_target_properties(${target_name} PROPERTIES COMPILE_WARNING_AS_ERROR OFF)
     if (onnxruntime_USE_CUDA)
+      include(CheckLanguage)
+      check_language(CUDA)
+      find_package(CUDAToolkit REQUIRED)
       # Suppress a "conversion_function_not_usable" warning in gsl/span
       target_compile_options(${target_name} PRIVATE "$<$<COMPILE_LANGUAGE:CUDA>:SHELL:-Xcudafe \"--diag_suppress=conversion_function_not_usable\">")
       target_compile_definitions(${target_name} PRIVATE -DDISABLE_CUSPARSE_DEPRECATED)
+      if(${target_name} MATCHES "cuda")
+        find_path(CUDAToolkit_CUPTI_INCLUDE_DIR NAMES cupti.h PATHS ${CUDAToolkit_INCLUDE_DIRS} "${CUDAToolkit_LIBRARY_ROOT}/extras/CUPTI/include" REQUIRED)
+        find_library(CUDAToolkit_CUPTI_LIBRARY NAMES cupti PATHS ${CUDAToolkit_LIBRARY_DIR} "${CUDAToolkit_LIBRARY_ROOT}/extras/CUPTI/lib64" REQUIRED)
+        get_filename_component(CUDAToolkit_CUPTI_LIBRARY_DIR "${CUDAToolkit_CUPTI_LIBRARY}" PATH)
+        target_include_directories(${target_name} PRIVATE ${CUDAToolkit_CUPTI_INCLUDE_DIR})
+        target_link_libraries(${target_name} PRIVATE ${CUDAToolkit_CUPTI_LIBRARY})
+        target_link_directories(${target_name} PRIVATE ${CUDAToolkit_CUPTI_LIBRARY_DIR})
+      endif()
     endif()
     if (MSVC)
       foreach(CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORY ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index d3e9c36..3a4d34c 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -1039,7 +1039,7 @@ function(onnxruntime_add_shared_library_module target_name)
     add_library(${target_name} SHARED ${ARGN})
   else()
     #On Windows, this target shouldn't generate an import lib, but I don't know how to disable it.
-    add_library(${target_name} MODULE ${ARGN})
+    add_library(${target_name} SHARED ${ARGN})
   endif()
 
   onnxruntime_configure_target(${target_name})
