diff --git a/cmake/onnxruntime_providers_coreml.cmake b/cmake/onnxruntime_providers_coreml.cmake
index 0aa25a2..1cb768c 100644
--- a/cmake/onnxruntime_providers_coreml.cmake
+++ b/cmake/onnxruntime_providers_coreml.cmake
@@ -9,7 +9,7 @@ add_compile_definitions(USE_COREML=1)
 
 # Check if we can build the coremltools code for creating an mlpackage with an mlprogram.
 # The coremltools source requires std::filesystem::path which is only available from iOS 13 on.
-set(_enable_ML_PROGRAM ON)
+option(_enable_ML_PROGRAM "..." ON)
 if (IOS AND CMAKE_OSX_DEPLOYMENT_TARGET VERSION_LESS 13.0)
   message(WARNING "CoreML ML Program is not supported on iOS < 13.0. Excluding ML Program support from build.")
   set(_enable_ML_PROGRAM OFF)
@@ -62,7 +64,7 @@ endif()
 # Separate source_group for each as the .proto files are in the repo and the .cc/.h files are generated in the build
 # output directory.
 set_target_properties(coreml_proto PROPERTIES FOLDER "External")
-source_group(TREE ${COREML_PROTO_ROOT} PREFIX coreml_proto FILES ${coreml_proto_srcs})
+# source_group(TREE ${COREML_PROTO_ROOT} PREFIX coreml_proto FILES ${coreml_proto_srcs})
 
 # filter to the generated .cc/.h files
 get_target_property(coreml_proto_generated_srcs coreml_proto SOURCES)
@@ -119,7 +121,7 @@ if(_enable_ML_PROGRAM)
     ${onnxruntime_providers_coreml_modelpackage_cc_srcs}
   )
 
-  source_group(TREE ${coremltools_SOURCE_DIR} PREFIX coremltools FILES ${coremltools_srcs})
+  # source_group(TREE ${coremltools_SOURCE_DIR} PREFIX coremltools FILES ${coremltools_srcs})
 endif()
 
 # Add CoreML objective c++ source code
diff --git a/cmake/external/onnxruntime_external_deps.cmake b/cmake/external/onnxruntime_external_deps.cmake
index 6ab4a84..23495e9 100644
--- a/cmake/external/onnxruntime_external_deps.cmake
+++ b/cmake/external/onnxruntime_external_deps.cmake
@@ -625,6 +625,9 @@ if(onnxruntime_ENABLE_TRAINING OR (onnxruntime_ENABLE_TRAINING_APIS AND onnxrunt
 endif()
 
 if (onnxruntime_USE_COREML)
+  if(DEFINED COREML_PROTO_ROOT)
+    message(STATUS "apple/coremltools sources may not used if COREML_PROTO_ROOT contains .proto files")
+  endif()
   FetchContent_Declare(
     coremltools
     URL ${DEP_URL_coremltools}
diff --git a/cmake/onnxruntime_providers_coreml.cmake b/cmake/onnxruntime_providers_coreml.cmake
index e138393..568394b 100644
--- a/cmake/onnxruntime_providers_coreml.cmake
+++ b/cmake/onnxruntime_providers_coreml.cmake
@@ -29,8 +29,12 @@ if (_enable_ML_PROGRAM)
 endif()
 
 # Compile CoreML proto definition to ${CMAKE_CURRENT_BINARY_DIR}/coreml_proto
-set(COREML_PROTO_ROOT ${coremltools_SOURCE_DIR}/mlmodel/format)
+if(NOT DEFINED COREML_PROTO_ROOT)
+  set(COREML_PROTO_ROOT ${coremltools_SOURCE_DIR}/mlmodel/format)
+endif()
 file(GLOB coreml_proto_srcs "${COREML_PROTO_ROOT}/*.proto")
+list(LENGTH coreml_proto_srcs coreml_proto_srcs_count)
+message(STATUS "Found ${coreml_proto_srcs_count} proto files ${COREML_PROTO_ROOT}")
 
 onnxruntime_add_static_library(coreml_proto ${coreml_proto_srcs})
 target_include_directories(coreml_proto
