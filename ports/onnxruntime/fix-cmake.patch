diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index fb4899d..e148119 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -869,8 +869,7 @@ add_library(safeint_interface INTERFACE)
 target_include_directories(safeint_interface INTERFACE ${SAFEINT_INCLUDE_DIR})
 
 if (onnxruntime_PREFER_SYSTEM_LIB)
-  find_package(boost_mp11)
-  find_package(Boost)
+  find_package(Boost REQUIRED)
   if (TARGET Boost::boost AND NOT TARGET Boost::mp11)
     add_library(Boost::mp11 ALIAS Boost::boost)
   endif()
@@ -1559,19 +1558,30 @@ else()
   set(ONNX_USE_LITE_PROTO OFF CACHE BOOL "" FORCE)
 endif()
 
-if (NOT onnxruntime_MINIMAL_BUILD)
-  add_subdirectory(external/onnx EXCLUDE_FROM_ALL)
-else()
-  include(onnx_minimal)
-endif()
+find_path(ONNX_INCLUDE_DIR NAMES "onnx/common/version.h" REQUIRED)
+find_library(ONNX_LIBRARY NAMES onnx REQUIRED)
+find_library(ONNX_PROTO_LIBRARY NAMES onnx_proto REQUIRED)
 
-target_compile_definitions(onnx PUBLIC $<TARGET_PROPERTY:onnx_proto,INTERFACE_COMPILE_DEFINITIONS> PRIVATE "__ONNX_DISABLE_STATIC_REGISTRATION")
-if (NOT onnxruntime_USE_FULL_PROTOBUF)
-  target_compile_definitions(onnx PUBLIC "__ONNX_NO_DOC_STRINGS")
-endif()
-set_target_properties(onnx PROPERTIES FOLDER "External/ONNX")
-set_target_properties(onnx_proto PROPERTIES FOLDER "External/ONNX")
+add_library(onnx STATIC IMPORTED GLOBAL)
+set_target_properties(onnx
+PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${ONNX_INCLUDE_DIR}"
+  INTERFACE_COMPILE_DEFINITIONS "ONNX_ML"
+  IMPORTED_IMPLIB "${ONNX_LIBRARY}"
+  IMPORTED_LOCATION "${ONNX_LIBRARY}"
+)
 
+add_library(onnx_proto STATIC IMPORTED GLOBAL)
+set_target_properties(onnx_proto
+PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${ONNX_INCLUDE_DIR}"
+  INTERFACE_COMPILE_DEFINITIONS "ONNX_ML"
+  IMPORTED_IMPLIB "${ONNX_PROTO_LIBRARY}"
+  IMPORTED_LOCATION "${ONNX_PROTO_LIBRARY}"
+)
+if(TRUE)
+  add_compile_definitions(ONNX_NAMESPACE=onnx ONNX_ML=1)
+endif()
 
 # fix a warning in onnx code we can't do anything about
 if (MSVC)
diff --git a/cmake/onnxruntime_common.cmake b/cmake/onnxruntime_common.cmake
index a8ca9c9..1dfbf77 100644
--- a/cmake/onnxruntime_common.cmake
+++ b/cmake/onnxruntime_common.cmake
@@ -217,8 +217,8 @@ if (ARM64 OR ARM OR X86 OR X64 OR X86_64)
     # Its functionality in detecting x86 cpu features are lacking, so is support for Windows.
 
     if (CPUINFO_SUPPORTED)
-      target_link_libraries(onnxruntime_common cpuinfo)
-      list(APPEND onnxruntime_EXTERNAL_LIBRARIES cpuinfo clog)
+      target_link_libraries(onnxruntime_common cpuinfo::cpuinfo)
+      list(APPEND onnxruntime_EXTERNAL_LIBRARIES cpuinfo::cpuinfo cpuinfo::clog)
     endif()
   endif()
 endif()
diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index a2e8e93..c1dd8fc 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -20,6 +20,7 @@ project(onnxruntime C CXX ASM)
 # Needed for Java
 set(CMAKE_C_STANDARD 99)
 
+include(GNUInstallDirs)
 include(CheckCXXCompilerFlag)
 include(CheckLanguage)
 include(CMakeDependentOption)
diff --git a/cmake/CMakeLists.txt b/cmake/CMakeLists.txt
index c1dd8fc..1db7687 100644
--- a/cmake/CMakeLists.txt
+++ b/cmake/CMakeLists.txt
@@ -744,9 +744,9 @@ endif()
 
 if (NOT WIN32)
   if (onnxruntime_PREFER_SYSTEM_LIB)
-    find_package(nsync)
+    find_package(unofficial-nsync CONFIG REQUIRED) # unofficial::nsync::nsync_cpp
   endif()
-  if (TARGET nsync_cpp)  # linking error with nsync_FOUND (why?)
+  if (TARGET unofficial::nsync::nsync_cpp)  # linking error with nsync_FOUND (why?)
     message("Use nsync from preinstalled system lib")
   else()
     message("Use nsync from submodule")
@@ -2021,7 +2021,7 @@ if (WIN32)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${SYS_PATH_LIB})
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES debug Dbghelp)
 else()
-  list(APPEND onnxruntime_EXTERNAL_LIBRARIES nsync_cpp)
+  list(APPEND onnxruntime_EXTERNAL_LIBRARIES unofficial::nsync::nsync_cpp)
   list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${CMAKE_DL_LIBS} Threads::Threads)
 endif()
 
diff --git a/cmake/onnxruntime_providers.cmake b/cmake/onnxruntime_providers.cmake
index 77eac4b..b2b94a8 100644
--- a/cmake/onnxruntime_providers.cmake
+++ b/cmake/onnxruntime_providers.cmake
@@ -521,10 +521,10 @@ if (onnxruntime_USE_CUDA)
 
   if(APPLE)
     set_property(TARGET onnxruntime_providers_cuda APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker -exported_symbols_list ${ONNXRUNTIME_ROOT}/core/providers/cuda/exported_symbols.lst")
-    target_link_libraries(onnxruntime_providers_cuda PRIVATE nsync_cpp)
+    target_link_libraries(onnxruntime_providers_cuda PRIVATE unofficial::nsync::nsync_cpp)
   elseif(UNIX)
     set_property(TARGET onnxruntime_providers_cuda APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker --version-script=${ONNXRUNTIME_ROOT}/core/providers/cuda/version_script.lds -Xlinker --gc-sections")
-    target_link_libraries(onnxruntime_providers_cuda PRIVATE nsync_cpp)
+    target_link_libraries(onnxruntime_providers_cuda PRIVATE unofficial::nsync::nsync_cpp)
   elseif(WIN32)
     set_property(TARGET onnxruntime_providers_cuda APPEND_STRING PROPERTY LINK_FLAGS "-DEF:${ONNXRUNTIME_ROOT}/core/providers/cuda/symbols.def")
   else()
@@ -577,10 +577,10 @@ if (onnxruntime_USE_DNNL)
       INSTALL_RPATH "@loader_path"
       BUILD_WITH_INSTALL_RPATH TRUE
       INSTALL_RPATH_USE_LINK_PATH FALSE)
-    target_link_libraries(onnxruntime_providers_dnnl PRIVATE nsync_cpp)
+    target_link_libraries(onnxruntime_providers_dnnl PRIVATE unofficial::nsync::nsync_cpp)
   elseif(UNIX)
     set_property(TARGET onnxruntime_providers_dnnl APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker --version-script=${ONNXRUNTIME_ROOT}/core/providers/dnnl/version_script.lds -Xlinker --gc-sections -Xlinker -rpath=\$ORIGIN")
-    target_link_libraries(onnxruntime_providers_dnnl PRIVATE nsync_cpp)
+    target_link_libraries(onnxruntime_providers_dnnl PRIVATE unofficial::nsync::nsync_cpp)
   elseif(WIN32)
     set_property(TARGET onnxruntime_providers_dnnl APPEND_STRING PROPERTY LINK_FLAGS "-DEF:${ONNXRUNTIME_ROOT}/core/providers/dnnl/symbols.def")
   else()
@@ -673,11 +673,11 @@ if (onnxruntime_USE_TENSORRT)
 
   if(APPLE)
     set_property(TARGET onnxruntime_providers_tensorrt APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker -exported_symbols_list ${ONNXRUNTIME_ROOT}/core/providers/tensorrt/exported_symbols.lst")
-    target_link_libraries(onnxruntime_providers_tensorrt PRIVATE nsync_cpp)
+    target_link_libraries(onnxruntime_providers_tensorrt PRIVATE unofficial::nsync::nsync_cpp)
   elseif(UNIX)
     set_property(TARGET onnxruntime_providers_tensorrt APPEND_STRING PROPERTY COMPILE_FLAGS "-Wno-deprecated-declarations")
     set_property(TARGET onnxruntime_providers_tensorrt APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker --version-script=${ONNXRUNTIME_ROOT}/core/providers/tensorrt/version_script.lds -Xlinker --gc-sections")
-    target_link_libraries(onnxruntime_providers_tensorrt PRIVATE nsync_cpp stdc++fs)
+    target_link_libraries(onnxruntime_providers_tensorrt PRIVATE unofficial::nsync::nsync_cpp stdc++fs)
   elseif(WIN32)
     set_property(TARGET onnxruntime_providers_tensorrt APPEND_STRING PROPERTY LINK_FLAGS "-DEF:${ONNXRUNTIME_ROOT}/core/providers/tensorrt/symbols.def")
   else()
@@ -1217,7 +1217,7 @@ if (onnxruntime_USE_MIGRAPHX)
   target_compile_options(onnxruntime_providers_migraphx PRIVATE -Wno-error=sign-compare)
   set_property(TARGET onnxruntime_providers_migraphx APPEND_STRING PROPERTY COMPILE_FLAGS "-Wno-deprecated-declarations")
   set_property(TARGET onnxruntime_providers_migraphx APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker --version-script=${ONNXRUNTIME_ROOT}/core/providers/migraphx/version_script.lds -Xlinker --gc-sections")
-  target_link_libraries(onnxruntime_providers_migraphx PRIVATE nsync_cpp stdc++fs)
+  target_link_libraries(onnxruntime_providers_migraphx PRIVATE unofficial::nsync::nsync_cpp stdc++fs)
 
   install(TARGETS onnxruntime_providers_migraphx
           ARCHIVE  DESTINATION ${CMAKE_INSTALL_LIBDIR}
@@ -1445,7 +1445,7 @@ if (onnxruntime_USE_ROCM)
 
   if(UNIX)
     set_property(TARGET onnxruntime_providers_rocm APPEND_STRING PROPERTY LINK_FLAGS "-Xlinker --version-script=${ONNXRUNTIME_ROOT}/core/providers/rocm/version_script.lds -Xlinker --gc-sections")
-    target_link_libraries(onnxruntime_providers_rocm PRIVATE nsync_cpp)
+    target_link_libraries(onnxruntime_providers_rocm PRIVATE unofficial::nsync::nsync_cpp)
   else()
     message(FATAL_ERROR "onnxruntime_providers_rocm unknown platform, need to specify shared library exports for it")
   endif()
diff --git a/cmake/external/xnnpack.cmake b/cmake/external/xnnpack.cmake
index 25e63ea..dc09bb8 100644
--- a/cmake/external/xnnpack.cmake
+++ b/cmake/external/xnnpack.cmake
@@ -1,27 +1,11 @@
-set(XNNPACK_DIR external/XNNPACK)
-set(XNNPACK_INCLUDE_DIR ${XNNPACK_DIR}/include)
-set(XNNPACK_USE_SYSTEM_LIBS ON CACHE INTERNAL "")
-set(XNNPACK_BUILD_TESTS OFF CACHE INTERNAL "")
-set(XNNPACK_BUILD_BENCHMARKS OFF CACHE INTERNAL "")
-set(FP16_BUILD_TESTS OFF CACHE INTERNAL "")
-set(FP16_BUILD_BENCHMARKS OFF CACHE INTERNAL "")
-set(CLOG_SOURCE_DIR "${PYTORCH_CPUINFO_DIR}/deps/clog")
-set(CPUINFO_SOURCE_DIR ${PYTORCH_CPUINFO_DIR})
-
 if (onnxruntime_BUILD_WEBASSEMBLY)
   execute_process(COMMAND  git apply --ignore-space-change --ignore-whitespace ${PROJECT_SOURCE_DIR}/patches/xnnpack/AddEmscriptenSupport.patch WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/${XNNPACK_DIR})
 endif()
 
-add_subdirectory(external/FP16)
-add_subdirectory(external/pthreadpool)
-add_subdirectory(external/XNNPACK)
-
-set_target_properties(fp16 PROPERTIES FOLDER "External/Xnnpack")
-set_target_properties(pthreadpool PROPERTIES FOLDER "External/Xnnpack")
-set_target_properties(XNNPACK PROPERTIES FOLDER "External/Xnnpack")
+find_package(unofficial-pthreadpool CONFIG REQUIRED) # unofficial::pthreadpool
+find_package(xnnpack CONFIG REQUIRED) # xnnpack
 
-set(onnxruntime_EXTERNAL_LIBRARIES_XNNPACK XNNPACK pthreadpool)
-list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${onnxruntime_EXTERNAL_LIBRARIES_XNNPACK})
+list(APPEND onnxruntime_EXTERNAL_LIBRARIES_XNNPACK xnnpack unofficial::pthreadpool)
 
 # the XNNPACK CMake setup doesn't include the WASM kernels so we have to manually set those up
 if (onnxruntime_BUILD_WEBASSEMBLY)
diff --git a/cmake/onnxruntime_providers.cmake b/cmake/onnxruntime_providers.cmake
index b2b94a8..99885a6 100644
--- a/cmake/onnxruntime_providers.cmake
+++ b/cmake/onnxruntime_providers.cmake
@@ -1521,7 +1521,7 @@ if (onnxruntime_USE_XNNPACK)
   source_group(TREE ${REPO_ROOT} FILES ${onnxruntime_providers_xnnpack_cc_srcs})
   onnxruntime_add_static_library(onnxruntime_providers_xnnpack ${onnxruntime_providers_xnnpack_cc_srcs})
   onnxruntime_add_include_to_target(onnxruntime_providers_xnnpack
-    onnxruntime_common onnxruntime_framework onnx onnx_proto ${PROTOBUF_LIB} XNNPACK pthreadpool
+    onnxruntime_common onnxruntime_framework onnx onnx_proto ${PROTOBUF_LIB} xnnpack unofficial::pthreadpool
   )
 
   add_dependencies(onnxruntime_providers_xnnpack onnx ${onnxruntime_EXTERNAL_DEPENDENCIES})
diff --git a/cmake/onnxruntime_providers.cmake b/cmake/onnxruntime_providers.cmake
index 99885a6..6fe1263 100644
--- a/cmake/onnxruntime_providers.cmake
+++ b/cmake/onnxruntime_providers.cmake
@@ -1523,6 +1523,7 @@ if (onnxruntime_USE_XNNPACK)
   onnxruntime_add_include_to_target(onnxruntime_providers_xnnpack
     onnxruntime_common onnxruntime_framework onnx onnx_proto ${PROTOBUF_LIB} xnnpack unofficial::pthreadpool
   )
+  target_link_libraries(onnxruntime_providers_xnnpack PUBLIC xnnpack unofficial::pthreadpool cpuinfo::cpuinfo)
 
   add_dependencies(onnxruntime_providers_xnnpack onnx ${onnxruntime_EXTERNAL_DEPENDENCIES})
   set_target_properties(onnxruntime_providers_xnnpack PROPERTIES FOLDER "ONNXRuntime")
