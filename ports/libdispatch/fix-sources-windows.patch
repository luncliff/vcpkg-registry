diff --git a/dispatch/base.h b/dispatch/base.h
index 7123f83..78e98b4 100644
--- a/dispatch/base.h
+++ b/dispatch/base.h
@@ -66,8 +66,8 @@
 #define DISPATCH_UNAVAILABLE __attribute__((__unavailable__))
 #define DISPATCH_UNAVAILABLE_MSG(msg) __attribute__((__unavailable__(msg)))
 #elif defined(_MSC_VER)
-#define DISPATCH_NORETURN __declspec(noreturn)
-#define DISPATCH_NOTHROW __declspec(nothrow)
+#define DISPATCH_NORETURN // __declspec(noreturn)
+#define DISPATCH_NOTHROW // __declspec(nothrow)
 #define DISPATCH_NONNULL1
 #define DISPATCH_NONNULL2
 #define DISPATCH_NONNULL3
@@ -85,7 +85,7 @@
 #define DISPATCH_WARN_RESULT
 #endif
 #define DISPATCH_MALLOC
-#define DISPATCH_ALWAYS_INLINE __forceinline
+#define DISPATCH_ALWAYS_INLINE // __forceinline
 #define DISPATCH_UNAVAILABLE
 #define DISPATCH_UNAVAILABLE_MSG(msg)
 #else
@@ -264,7 +264,7 @@
 #endif
 #endif
 
-#if __has_feature(objc_fixed_enum) || __has_extension(cxx_strong_enums) || defined(_WIN32)
+#if __has_feature(objc_fixed_enum) || __has_extension(cxx_strong_enums)
 #define DISPATCH_ENUM(name, type, ...) \
 		typedef enum : type { __VA_ARGS__ } name##_t
 #else
diff --git a/dispatch/object.h b/dispatch/object.h
index 02815f3..c386784 100644
--- a/dispatch/object.h
+++ b/dispatch/object.h
@@ -533,13 +533,13 @@ dispatch_testcancel(void *object);
  */
 API_DEPRECATED("unsupported interface", macos(10.6,10.9), ios(4.0,6.0))
 DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NOTHROW DISPATCH_COLD
-__attribute__((__format__(printf,2,3)))
+
 void
 dispatch_debug(dispatch_object_t object, const char *message, ...);
 
 API_DEPRECATED("unsupported interface", macos(10.6,10.9), ios(4.0,6.0))
 DISPATCH_EXPORT DISPATCH_NONNULL2 DISPATCH_NOTHROW DISPATCH_COLD
-__attribute__((__format__(printf,2,0)))
+
 void
 dispatch_debugv(dispatch_object_t object, const char *message, va_list ap);
 
diff --git a/src/BlocksRuntime/Block_private.h b/src/BlocksRuntime/Block_private.h
index b2e1512..ebf9d06 100644
--- a/src/BlocksRuntime/Block_private.h
+++ b/src/BlocksRuntime/Block_private.h
@@ -253,7 +253,7 @@ struct Block_basic {
     void (*Block_copy)(void *dst, void *src);  // iff BLOCK_HAS_COPY_DISPOSE
     void (*Block_dispose)(void *);             // iff BLOCK_HAS_COPY_DISPOSE
     //long params[0];  // where const imports, __block storage references, etc. get laid down
-} __attribute__((deprecated));
+}; // __attribute__((deprecated));
 
 
 #if __cplusplus
diff --git a/src/internal.h b/src/internal.h
index cf4ccfe..5a8118e 100644
--- a/src/internal.h
+++ b/src/internal.h
@@ -40,7 +40,9 @@
 #include <Availability.h>
 #include <os/availability.h>
 #include <TargetConditionals.h>
-#endif // __APPLE__
+#elif _WIN32
+#define TARGET_OS_MAC 0
+#endif // __APPLE__ || _WIN32
 
 
 #if !defined(DISPATCH_MACH_SPI) && TARGET_OS_MAC
@@ -606,7 +608,7 @@ _dispatch_assume_zero(long e, size_t line) DISPATCH_STATIC_ASSERT_IF(e)
 #if DISPATCH_DEBUG
 /* This is the private version of the deprecated dispatch_debug() */
 DISPATCH_NONNULL2 DISPATCH_NOTHROW
-__attribute__((__format__(printf,2,3)))
+
 void
 _dispatch_object_debug(dispatch_object_t object, const char *message, ...);
 #else
diff --git a/src/shims/atomic.h b/src/shims/atomic.h
index c002e72..e44f3f5 100644
--- a/src/shims/atomic.h
+++ b/src/shims/atomic.h
@@ -27,7 +27,7 @@
 #ifndef __DISPATCH_SHIMS_ATOMIC__
 #define __DISPATCH_SHIMS_ATOMIC__
 
-#if !__has_extension(c_atomic) || !__has_include(<stdatomic.h>)
+#if !__has_include(<stdatomic.h>)
 #error libdispatch requires C11 with <stdatomic.h>
 #endif
 
diff --git a/src/block.cpp b/src/block.cpp
index 55f83c2..19d6d30 100644
--- a/src/block.cpp
+++ b/src/block.cpp
@@ -28,6 +28,13 @@
 #error Must build without C++ exceptions
 #endif
 
+#if defined(_MSC_VER) && defined(__STDC_HOSTED__) // include the toolchain(VC++, LLVM) <stdatomic.h>
+#  if __STDC_HOSTED__ 
+#    undef __STDC_HOSTED__
+#    define __STDC_HOSTED__ 0
+#  endif
+#endif
+
 #include "internal.h"
 
 // NOTE: this file must not contain any atomic operations
