diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1d93266..c6c6a37 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,7 +12,7 @@ CMAKE_MINIMUM_REQUIRED(VERSION 3.12 FATAL_ERROR)
 # ---[ Project and semantic versioning.
 PROJECT(XNNPACK C CXX ASM)
 
-SET(CMAKE_C_STANDARD 99)
+set(CMAKE_C_STANDARD 11)
 SET(CMAKE_C_EXTENSIONS NO)
 SET(CMAKE_CXX_STANDARD 11)
 SET(CMAKE_CXX_STANDARD_REQUIRED YES)
@@ -6831,7 +6831,7 @@ ELSE()
   SET_PROPERTY(SOURCE ${COLD_SRCS} APPEND_STRING PROPERTY COMPILE_FLAGS "$<$<NOT:$<CONFIG:Debug>>: -Os >")
 ENDIF()
 
-TARGET_INCLUDE_DIRECTORIES(XNNPACK PUBLIC include)
+TARGET_INCLUDE_DIRECTORIES(XNNPACK PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)
 TARGET_INCLUDE_DIRECTORIES(XNNPACK PRIVATE src)
 TARGET_INCLUDE_DIRECTORIES(allocator PRIVATE include src)
 TARGET_INCLUDE_DIRECTORIES(all_microkernels PRIVATE include src)
@@ -6860,7 +6860,8 @@ IF(LIBM)
 ENDIF()
 
 # ---[ Configure clog
-IF(NOT TARGET clog)
+find_package(cpuinfo CONFIG REQUIRED)
+IF(false)
   IF(NOT XNNPACK_USE_SYSTEM_LIBS)
     SET(CLOG_BUILD_TESTS OFF CACHE BOOL "")
     SET(CLOG_RUNTIME_TYPE "${CPUINFO_RUNTIME_TYPE}" CACHE STRING "")
@@ -6878,17 +6879,17 @@ IF(NOT TARGET clog)
     SET_PROPERTY(TARGET clog PROPERTY IMPORTED_LOCATION "${CLOG_LIBRARY}")
   ENDIF()
 ENDIF()
-TARGET_LINK_LIBRARIES(XNNPACK PRIVATE clog)
-TARGET_LINK_LIBRARIES(allocator PRIVATE clog)
-TARGET_LINK_LIBRARIES(jit PRIVATE clog)
-TARGET_LINK_LIBRARIES(logging PRIVATE clog)
-TARGET_LINK_LIBRARIES(cache PRIVATE clog)
-TARGET_LINK_LIBRARIES(subgraph PRIVATE clog)
-TARGET_LINK_LIBRARIES(operators PRIVATE clog)
-TARGET_LINK_LIBRARIES(mutex PRIVATE clog)
+target_link_libraries(XNNPACK PRIVATE cpuinfo::clog)
+target_link_libraries(allocator PRIVATE cpuinfo::clog)
+target_link_libraries(jit PRIVATE cpuinfo::clog)
+target_link_libraries(logging PRIVATE cpuinfo::clog)
+target_link_libraries(cache PRIVATE cpuinfo::clog)
+target_link_libraries(subgraph PRIVATE cpuinfo::clog)
+target_link_libraries(operators PRIVATE cpuinfo::clog)
+target_link_libraries(mutex PRIVATE cpuinfo::clog)
 
 # ---[ Configure cpuinfo
-IF(NOT TARGET cpuinfo)
+IF(false)
   IF(NOT XNNPACK_USE_SYSTEM_LIBS)
     SET(CPUINFO_BUILD_TOOLS OFF CACHE BOOL "")
     SET(CPUINFO_BUILD_UNIT_TESTS OFF CACHE BOOL "")
@@ -6906,10 +6907,11 @@ IF(NOT TARGET cpuinfo)
     SET_PROPERTY(TARGET cpuinfo PROPERTY IMPORTED_LOCATION "${CPUINFO_LIBRARY}")
   ENDIF()
 ENDIF()
-TARGET_LINK_LIBRARIES(XNNPACK PRIVATE cpuinfo)
+target_link_libraries(XNNPACK PRIVATE cpuinfo::cpuinfo)
 
 # ---[ Configure pthreadpool
-IF(NOT TARGET pthreadpool)
+find_package(unofficial-pthreadpool CONFIG REQUIRED)
+IF(false)
   IF(NOT XNNPACK_USE_SYSTEM_LIBS)
     SET(PTHREADPOOL_BUILD_TESTS OFF CACHE BOOL "")
     SET(PTHREADPOOL_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -6926,21 +6928,22 @@ IF(NOT TARGET pthreadpool)
     SET_PROPERTY(TARGET pthreadpool PROPERTY IMPORTED_LOCATION "${PTHREADPOOL_LIBRARY}")
   ENDIF()
 ENDIF()
-TARGET_LINK_LIBRARIES(XNNPACK PUBLIC pthreadpool allocator)
-TARGET_LINK_LIBRARIES(allocator PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(all_microkernels PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(cache PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(indirection PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(jit PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(logging PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(packing PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(params_init PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(subgraph PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(operators PRIVATE pthreadpool)
-TARGET_LINK_LIBRARIES(mutex PRIVATE pthreadpool)
+target_link_libraries(XNNPACK PUBLIC unofficial::pthreadpool allocator)
+target_link_libraries(allocator PRIVATE unofficial::pthreadpool)
+target_link_libraries(all_microkernels PRIVATE unofficial::pthreadpool)
+target_link_libraries(cache PRIVATE unofficial::pthreadpool)
+target_link_libraries(indirection PRIVATE unofficial::pthreadpool)
+target_link_libraries(jit PRIVATE unofficial::pthreadpool)
+target_link_libraries(logging PRIVATE unofficial::pthreadpool)
+target_link_libraries(packing PRIVATE unofficial::pthreadpool)
+target_link_libraries(params_init PRIVATE unofficial::pthreadpool)
+target_link_libraries(subgraph PRIVATE unofficial::pthreadpool)
+target_link_libraries(operators PRIVATE unofficial::pthreadpool)
+target_link_libraries(mutex PRIVATE unofficial::pthreadpool)
 
 # ---[ Configure FXdiv
-IF(NOT TARGET fxdiv)
+find_path(FXDIV_INCLUDE_DIRS "fxdiv.h" REQUIRED)
+IF(false)
   IF(NOT XNNPACK_USE_SYSTEM_LIBS)
     SET(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     SET(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -6956,12 +6959,13 @@ IF(NOT TARGET fxdiv)
     SET_PROPERTY(TARGET fxdiv PROPERTY LINKER_LANGUAGE C)
   ENDIF()
 ENDIF()
-TARGET_LINK_LIBRARIES(XNNPACK PRIVATE fxdiv)
-TARGET_LINK_LIBRARIES(all_microkernels PRIVATE fxdiv)
-TARGET_LINK_LIBRARIES(indirection PRIVATE fxdiv)
+target_include_directories(XNNPACK PRIVATE ${FXDIV_INCLUDE_DIRS})
+target_include_directories(all_microkernels PRIVATE ${FXDIV_INCLUDE_DIRS})
+target_include_directories(indirection PRIVATE ${FXDIV_INCLUDE_DIRS})
 
 # ---[ Configure FP16
-IF(NOT TARGET fp16)
+find_path(FP16_INCLUDE_DIRS "fp16.h" REQUIRED)
+IF(false)
   IF(NOT XNNPACK_USE_SYSTEM_LIBS)
     SET(FP16_BUILD_TESTS OFF CACHE BOOL "")
     SET(FP16_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -6979,19 +6983,19 @@ IF(NOT TARGET fp16)
 ENDIF()
 TARGET_LINK_LIBRARIES(XNNPACK PRIVATE
   cache
-  fp16
   logging
   mutex
   normalization
   operators
   params_init
   subgraph)
-TARGET_LINK_LIBRARIES(all_microkernels PRIVATE fp16)
-TARGET_LINK_LIBRARIES(packing PRIVATE fp16)
-TARGET_LINK_LIBRARIES(params_init PRIVATE fp16)
-TARGET_LINK_LIBRARIES(indirection PRIVATE fp16)
-TARGET_LINK_LIBRARIES(subgraph PRIVATE fp16)
-TARGET_LINK_LIBRARIES(operators PRIVATE fp16)
+target_include_directories(XNNPACK PRIVATE ${FP16_INCLUDE_DIRS})
+target_include_directories(all_microkernels PRIVATE ${FP16_INCLUDE_DIRS})
+target_include_directories(packing PRIVATE ${FP16_INCLUDE_DIRS})
+target_include_directories(params_init PRIVATE ${FP16_INCLUDE_DIRS})
+target_include_directories(indirection PRIVATE ${FP16_INCLUDE_DIRS})
+target_include_directories(subgraph PRIVATE ${FP16_INCLUDE_DIRS})
+target_include_directories(operators PRIVATE ${FP16_INCLUDE_DIRS})   
 
 INSTALL(TARGETS XNNPACK
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
