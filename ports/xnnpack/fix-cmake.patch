diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9df3691..6c457cc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -64,7 +64,10 @@ IF(XNNPACK_BUILD_BENCHMARKS OR XNNPACK_BUILD_TESTS)
 ENDIF()
 
 # --- [ Determine target processor
-IF(CMAKE_OSX_ARCHITECTURES)
+if(EMSCRIPTEN)
+  message(STATUS "Building XNNPACK for WebAssembly with Emscripten")
+  set(XNNPACK_TARGET_PROCESSOR "wasm")
+elseif(CMAKE_OSX_ARCHITECTURES)
   LIST(LENGTH CMAKE_OSX_ARCHITECTURES CMAKE_OSX_ARCHITECTURES_COUNT)
   IF(CMAKE_OSX_ARCHITECTURES_COUNT GREATER 1)
     MESSAGE(FATAL_ERROR "Unsupported XNNPACK build with multiple OSX architectures (${CMAKE_OSX_ARCHITECTURES}). "
@@ -96,7 +96,7 @@ ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "AMD64")
   SET(XNNPACK_TARGET_PROCESSOR "x86_64")
 ELSEIF(CMAKE_SYSTEM_PROCESSOR MATCHES "^armv[5-8]")
   SET(XNNPACK_TARGET_PROCESSOR "arm")
-ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64")
+ELSEIF((CMAKE_SYSTEM_PROCESSOR STREQUAL "aarch64") OR (CMAKE_SYSTEM_PROCESSOR STREQUAL "ARM64"))
   SET(XNNPACK_TARGET_PROCESSOR "arm64")
 ELSEIF(CMAKE_SYSTEM_PROCESSOR STREQUAL "ppc64le")
   SET(XNNPACK_TARGET_PROCESSOR "ppc64")
@@ -355,13 +358,18 @@ ENDIF()
 # ---[ Build flags
 IF(NOT CMAKE_SYSTEM_NAME)
   MESSAGE(FATAL_ERROR "CMAKE_SYSTEM_NAME not defined")
-ELSEIF(NOT CMAKE_SYSTEM_NAME MATCHES "^(Android|Darwin|iOS|Linux|Windows|CYGWIN|MSYS|QURT)$")
+elseif(NOT CMAKE_SYSTEM_NAME MATCHES "^(Android|Darwin|iOS|Linux|Windows|WindowsStore|Emscripten|CYGWIN|MSYS|QURT)$")
   MESSAGE(FATAL_ERROR "Unrecognized CMAKE_SYSTEM_NAME value \"${CMAKE_SYSTEM_NAME}\"")
 ENDIF()
 IF(CMAKE_SYSTEM_NAME MATCHES "Windows")
   # Disable min/max macros as they break std::min/max and std::numeric_limits<T>min/max.
   ADD_COMPILE_DEFINITIONS("NOMINMAX")
 ENDIF()
+if(EMSCRIPTEN)
+  add_compile_options("-msimd128")
+  add_compile_options("-mfp16")
+  add_compile_options("-mrelaxed-simd")
+endif()
 
 IF(CMAKE_SYSTEM_NAME MATCHES "^(Android)$")
   IF(XNNPACK_TARGET_PROCESSOR MATCHES "^arm64")
@@ -819,6 +827,12 @@ IF(XNNPACK_TARGET_PROCESSOR MATCHES "^riscv")
     LIST(APPEND PROD_MICROKERNEL_SRCS ${PROD_RVVFP16ARITH_MICROKERNEL_SRCS})
   ENDIF()
 ENDIF()
+if(XNNPACK_TARGET_PROCESSOR MATCHES "^wasm")
+  list(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_WASMRELAXEDSIMD_MICROKERNEL_SRCS})
+  list(APPEND PROD_MICROKERNEL_SRCS ${PROD_WASMRELAXEDSIMD_MICROKERNEL_SRCS})
+  list(APPEND NON_PROD_MICROKERNEL_SRCS ${NON_PROD_WASMSIMD_MICROKERNEL_SRCS})
+  list(APPEND PROD_MICROKERNEL_SRCS ${PROD_WASMSIMD_MICROKERNEL_SRCS})
+endif()
 
 SET(ALL_MICROKERNEL_SRCS ${PROD_MICROKERNEL_SRCS} ${NON_PROD_MICROKERNEL_SRCS})
 
@@ -1116,7 +1130,7 @@ ENDIF()
 INCLUDE_DIRECTORIES(.)
 TARGET_INCLUDE_DIRECTORIES(hardware-config PRIVATE include src ${CPUINFO_SOURCE_DIR}/include)
 IF(XNNPACK_BUILD_LIBRARY)
-  TARGET_INCLUDE_DIRECTORIES(XNNPACK PUBLIC include)
+  target_include_directories(XNNPACK PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/include>)
   IF(WIN32)
     # Target Windows 7+ API
     TARGET_COMPILE_DEFINITIONS(XNNPACK PRIVATE _WIN32_WINNT=0x0601)
@@ -1194,7 +1208,11 @@ TARGET_LINK_LIBRARIES(xnnpack-base INTERFACE pthreadpool)
 
 # ---[ Configure FXdiv
 IF(NOT TARGET fxdiv)
-  IF(NOT XNNPACK_USE_SYSTEM_LIBS)
+  if(TRUE)
+    find_path(FXDIV_INCLUDE_DIR fxdiv.h REQUIRED)
+    add_library(fxdiv INTERFACE)
+    target_include_directories(fxdiv INTERFACE "${FXDIV_INCLUDE_DIR}")
+  elseif(NOT XNNPACK_USE_SYSTEM_LIBS)
     SET(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     SET(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
     ADD_SUBDIRECTORY(
