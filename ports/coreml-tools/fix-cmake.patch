diff --git a/CMakeLists.txt b/CMakeLists.txt
index d462525..1f97838 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -3,6 +3,7 @@ cmake_minimum_required(VERSION 3.10.2)
 set(CMAKE_DISABLE_IN_SOURCE_BUILD ON)
 
 project(coremltools)
+include(GNUInstallDirs)
 
 if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
   message(FATAL_ERROR "
@@ -31,34 +32,49 @@ if(HAS_CCACHE)
   set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
 endif()
 
-add_subdirectory(deps)
-add_subdirectory(mlmodel)
+find_package(Python3 COMPONENTS Interpreter REQUIRED)
+if(NOT CMAKE_CROSSCOMPILING)
+  find_package(Python3 COMPONENTS Development NumPy REQUIRED)
+  link_libraries(Python3::Python Python3::NumPy)
+endif()
+
+find_package(pybind11 CONFIG)
+if(pybind11_FOUND)
+  include_directories(${pybind11_INCLUDE_DIRS})
+  link_libraries(${pybind11_LIBRARIES})
+  add_compile_definitions(${pybind11_DEFINITIONS})
+endif()
 
-find_package(PythonInterp)
-find_package(PythonLibs)
+find_package(nlohmann_json CONFIG REQUIRED) # nlohmann_json::nlohmann_json
+link_libraries(nlohmann_json::nlohmann_json)
 
-message("Found python at ${PYTHON_EXECUTABLE}")
-message("Found python version ${PYTHON_VERSION_STRING}")
-message("Found python includes ${PYTHON_INCLUDE_DIRS}")
+find_package(protobuf CONFIG REQUIRED) # protobuf::libprotobuf
+
+add_subdirectory(mlmodel)
+
+message(STATUS "Found python at ${Python3_EXECUTABLE}")
+message(STATUS "Found python version ${Python3_VERSION}")
+message(STATUS "Found python includes ${Python3_INCLUDE_DIRS}")
 
 include_directories(
   .
-  deps/protobuf/src
-  deps/pybind11/include
-  deps/nlohmann
   mlmodel/src
-  ${PYTHON_INCLUDE_DIRS}
+  ${pybind11_INCLUDE_DIRS}
   )
 
 if(APPLE)
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fobjc-arc")
+  add_compile_options(-fobjc-arc)
 endif()
+if(CMAKE_CROSSCOMPILING)
+  return()
+endif() # just libraries. no executables
 
 add_library(milstoragepython
   SHARED
   milstoragepython/MilStorage.cpp
   milstoragepython/MilStoragePython.cpp
   )
+install(TARGETS milstoragepython DESTINATION ${CMAKE_INSTALL_LIBDIR})
 
 target_link_libraries(milstoragepython
   mlmodel
@@ -70,7 +86,8 @@ add_library(modelpackage
   modelpackage/src/utils/JsonMap.cpp
   modelpackage/src/ModelPackagePython.cpp
   )
-  
+install(TARGETS modelpackage DESTINATION ${CMAKE_INSTALL_LIBDIR})
+
 target_compile_definitions(modelpackage
   PRIVATE
   CPU_ONLY=1
@@ -78,7 +95,7 @@ target_compile_definitions(modelpackage
 
 target_link_libraries(modelpackage
   mlmodel
-  libprotobuf
+  protobuf::libprotobuf
   )
 
 if (CMAKE_COMPILER_IS_GNUCC AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.1)
@@ -132,21 +149,7 @@ find_library(CORE_VIDEO CoreVideo)
 find_library(CORE_ML CoreML)
 find_library(FOUNDATION Foundation)
 
-if (APPLE AND CORE_VIDEO AND CORE_ML AND FOUNDATION)
-  execute_process(
-      COMMAND ${PYTHON_EXECUTABLE} -c "import numpy; print(numpy.get_include())"
-      RESULT_VARIABLE NUMPY_INCLUDE_STATUS
-      OUTPUT_VARIABLE NUMPY_INCLUDE
-  )
-
-  if("${NUMPY_INCLUDE}" STREQUAL "" OR NOT NUMPY_INCLUDE_STATUS EQUAL 0)
-      message(FATAL_ERROR "Could not find numpy include path. Exit code: ${NUMPY_INCLUDE_STATUS}")
-  endif()
-  message("Found numpy include path at ${NUMPY_INCLUDE}")
-
-  include_directories(
-    ${NUMPY_INCLUDE}
-  )
+if (APPLE)
 
   add_library(coremlpython
     SHARED
@@ -157,6 +160,7 @@ if (APPLE AND CORE_VIDEO AND CORE_ML AND FOUNDATION)
     coremlpython/CoreMLPythonUtils.mm
     coremlpython/CoreMLPythonUtils.h
   )
+  install(TARGETS coremlpython DESTINATION ${CMAKE_INSTALL_LIBDIR})
   target_link_libraries(coremlpython
     mlmodel
     ${CORE_VIDEO}
diff --git a/cmake/coreml-utils.cmake b/cmake/coreml-utils.cmake
index ab4679c..259b4ef 100644
--- a/cmake/coreml-utils.cmake
+++ b/cmake/coreml-utils.cmake
@@ -20,35 +20,55 @@
 #    to the list proto_depends in PARENT_SCOPE.
 #
 function(coreml_add_build_proto proto_fn target_suffix)
+    # some commands need mlmodel/enumgen host executable
+    if(CMAKE_CROSSCOMPILING)
+        find_program(ENUMGEN NAMES enumgen mlmodel/enumgen REQUIRED)
+    else()
+        set(ENUMGEN mlmodel${target_suffix}/enumgen)
+    endif()
+
     add_custom_command(
         OUTPUT
             ${CMAKE_CURRENT_BINARY_DIR}/format/${proto_fn}.pb.cc
             ${CMAKE_CURRENT_BINARY_DIR}/format/${proto_fn}.pb.h
         COMMENT "Generating c++ sources from ${proto_fn}.proto into ${CMAKE_CURRENT_BINARY_DIR}/format/"
-        COMMAND ${CMAKE_BINARY_DIR}/deps/protobuf/cmake/protoc
+        COMMAND ${Protobuf_PROTOC_EXECUTABLE}
             --cpp_out=${CMAKE_CURRENT_BINARY_DIR}/format/
             -I${CMAKE_CURRENT_SOURCE_DIR}/format
             ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
-        DEPENDS protoc
-        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-    )
-    add_custom_command(
-        OUTPUT
-            ${CMAKE_CURRENT_BINARY_DIR}/format/${proto_fn}_enum.h
-        COMMENT "Generating c++ enums from ${proto_fn}.proto into ${CMAKE_CURRENT_BINARY_DIR}/format/"
-        COMMAND ${CMAKE_BINARY_DIR}/deps/protobuf/cmake/protoc
-            --plugin=protoc-gen-enum=mlmodel/enumgen
-            --enum_out=${CMAKE_CURRENT_BINARY_DIR}/format/
-            -I${CMAKE_CURRENT_SOURCE_DIR}/format/
-            ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
-        DEPENDS enumgen protoc
         WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
     )
+
+    if(NOT CMAKE_CROSSCOMPILING)
+        add_custom_command(
+            OUTPUT
+                ${CMAKE_CURRENT_BINARY_DIR}/format/${proto_fn}_enum.h
+            COMMENT "Generating c++ enums from ${proto_fn}.proto into ${CMAKE_CURRENT_BINARY_DIR}/format/"
+            COMMAND ${Protobuf_PROTOC_EXECUTABLE}
+                --plugin=protoc-gen-enum=${ENUMGEN}
+                --enum_out=${CMAKE_CURRENT_BINARY_DIR}/format/
+                -I${CMAKE_CURRENT_SOURCE_DIR}/format/
+                ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
+            DEPENDS enumgen
+            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+        )
+    else()
+        add_custom_command(
+            OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/format/${proto_fn}_enum.h
+            COMMAND ${Protobuf_PROTOC_EXECUTABLE}
+                --plugin=protoc-gen-enum=${ENUMGEN}
+                --enum_out=${CMAKE_CURRENT_BINARY_DIR}/format/
+                -I${CMAKE_CURRENT_SOURCE_DIR}/format/
+                ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
+            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+        )
+    endif()
+
     add_custom_command(
         OUTPUT
             ${CMAKE_BINARY_DIR}/coremltools${target_suffix}/proto/${proto_fn}_pb2.py
         COMMENT "Generating Python sources from ${proto_fn}.proto into ${CMAKE_BINARY_DIR}/coremltools${target_suffix}/proto/"
-        COMMAND ${CMAKE_BINARY_DIR}/deps/protobuf/cmake/protoc
+        COMMAND ${Protobuf_PROTOC_EXECUTABLE}
             --python_out=${CMAKE_BINARY_DIR}/coremltools${target_suffix}/proto
             -I${CMAKE_CURRENT_SOURCE_DIR}/format/
             ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
@@ -58,7 +78,6 @@ function(coreml_add_build_proto proto_fn target_suffix)
             --no-diff
             -f import
             ${CMAKE_BINARY_DIR}/coremltools${target_suffix}/${proto_fn}_pb2.py
-        DEPENDS protoc
         WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
     )
     # For the CoreML framework we read the source file locations for these, and
@@ -67,26 +86,40 @@ function(coreml_add_build_proto proto_fn target_suffix)
     if(OVERWRITE_PB_SOURCE)
         add_custom_target(tgt_${proto_fn}_source ALL
             COMMENT "Generating c++ sources from ${proto_fn}.proto into ${CMAKE_CURRENT_SOURCE_DIR}/build/format/"
-            COMMAND ${CMAKE_BINARY_DIR}/deps/protobuf/cmake/protoc
+            COMMAND ${Protobuf_PROTOC_EXECUTABLE}
                 --cpp_out=${CMAKE_CURRENT_SOURCE_DIR}/build/format/
                 -I${CMAKE_CURRENT_SOURCE_DIR}/format
                 ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
-            DEPENDS protoc
-            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
-        )
-        add_custom_target(tgt_${proto_fn}_enums ALL
-            COMMENT "Generating c++ enums from ${proto_fn}.proto into ${CMAKE_CURRENT_SOURCE_DIR}/build/format/"
-            COMMAND ${CMAKE_BINARY_DIR}/deps/protobuf/cmake/protoc
-                --plugin=protoc-gen-enum=mlmodel/enumgen
-                --enum_out=${CMAKE_CURRENT_SOURCE_DIR}/build/format/
-                -I${CMAKE_CURRENT_SOURCE_DIR}/format/
-                ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
-            DEPENDS enumgen protoc
-            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
         )
+
+        if(NOT CMAKE_CROSSCOMPILING)
+            add_custom_target(tgt_${proto_fn}_enums ALL
+                COMMENT "Generating c++ enums from ${proto_fn}.proto into ${CMAKE_CURRENT_SOURCE_DIR}/build/format/"
+                COMMAND ${Protobuf_PROTOC_EXECUTABLE}
+                    --plugin=protoc-gen-enum=${ENUMGEN}
+                    --enum_out=${CMAKE_CURRENT_SOURCE_DIR}/build/format/
+                    -I${CMAKE_CURRENT_SOURCE_DIR}/format/
+                    ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
+                DEPENDS enumgen
+                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+            )
+        else()
+            add_custom_target(tgt_${proto_fn}_enums ALL
+                COMMENT "Generating c++ enums from ${proto_fn}.proto into ${CMAKE_CURRENT_SOURCE_DIR}/build/format/"
+                COMMAND ${Protobuf_PROTOC_EXECUTABLE}
+                    --plugin=protoc-gen-enum=${ENUMGEN}
+                    --enum_out=${CMAKE_CURRENT_SOURCE_DIR}/build/format/
+                    -I${CMAKE_CURRENT_SOURCE_DIR}/format/
+                    ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
+                DEPENDS enumgen
+                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+            )
+        endif()
+
         add_custom_target(tgt_${proto_fn}_python ALL
             COMMENT "Generating Python sources from ${proto_fn}.proto into ${CMAKE_SOURCE_DIR}/coremltools${target_suffix}/proto/"
-            COMMAND ${CMAKE_BINARY_DIR}/deps/protobuf/cmake/protoc
+            COMMAND ${Protobuf_PROTOC_EXECUTABLE}
                 --python_out=${CMAKE_SOURCE_DIR}/coremltools${target_suffix}/proto
                 -I${CMAKE_CURRENT_SOURCE_DIR}/format/
                 ${CMAKE_CURRENT_SOURCE_DIR}/format/${proto_fn}.proto
@@ -96,8 +129,7 @@ function(coreml_add_build_proto proto_fn target_suffix)
                 --no-diff
                 -f import
                 ${CMAKE_SOURCE_DIR}/coremltools${target_suffix}/proto/${proto_fn}_pb2.py
-            DEPENDS protoc
-            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+                WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
         )
         # Record dependencies for 'protosrc' target.
         list(APPEND proto_depends tgt_${proto_fn}_source)
diff --git a/mlmodel/CMakeLists.txt b/mlmodel/CMakeLists.txt
index 6d7b7fa..85cf718 100644
--- a/mlmodel/CMakeLists.txt
+++ b/mlmodel/CMakeLists.txt
@@ -2,8 +2,7 @@ include("${CMAKE_SOURCE_DIR}/cmake/coreml-utils.cmake")
 
 include_directories(
   ..
-  ../deps/FP16/include
-  ../deps/protobuf/src
+#   ../deps/FP16/include
   src
 )
 
@@ -64,6 +63,7 @@ target_link_libraries(mlmodel_test
 add_executable(mlmodel_test_runner
     test_runner.cpp
 )
+install(TARGETS mlmodel_test_runner DESTINATION ${CMAKE_INSTALL_BINDIR})
 
 target_link_libraries(mlmodel_test_runner
     mlmodel_test
@@ -72,8 +72,6 @@ target_link_libraries(mlmodel_test_runner
 add_library(mlmodel
     STATIC
 
-    ../deps/protobuf/src/google/protobuf/io/zero_copy_stream_impl.cc
-
     ${CMAKE_CURRENT_BINARY_DIR}/format/ArrayFeatureExtractor.pb.cc
     ${CMAKE_CURRENT_BINARY_DIR}/format/AudioFeaturePrint.pb.cc
     ${CMAKE_CURRENT_BINARY_DIR}/format/BayesianProbitRegressor.pb.cc
@@ -167,20 +165,22 @@ add_library(mlmodel
     src/Validation/WordEmbeddingValidator.cpp
     src/Validation/WordTaggerValidator.cpp
 )
+install(TARGETS mlmodel DESTINATION ${CMAKE_INSTALL_LIBDIR})
+#
 
 set_property(TARGET mlmodel
     PROPERTY POSITION_INDEPENDENT_CODE ON
 )
 
 target_link_libraries(mlmodel
-  libprotobuf-lite
+    protobuf::libprotobuf-lite
 )
 
 add_executable(enumgen
     EXCLUDE_FROM_ALL
     tools/enumgen.cpp
-    ../deps/protobuf/src/google/protobuf/compiler/plugin.pb.cc
 )
+install(TARGETS enumgen DESTINATION ${CMAKE_INSTALL_BINDIR})
 
 set(proto_files
     ArrayFeatureExtractor
@@ -219,7 +218,7 @@ set(proto_files
 )
 
 target_link_libraries(enumgen
-    libprotobuf
+    protobuf::libprotobuf protobuf::libprotoc
 )
 
 option(OVERWRITE_PB_SOURCE
