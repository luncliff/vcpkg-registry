#
# Author: github.com/luncliff (luncliff@gmail.com)
#
# References
#   https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops#job-reuse
#

parameters:
  - name: job_name
    type: string
  - name: port_name
    type: string

jobs:
  - job: "windows_${{ parameters.job_name }}"
    pool:
      vmImage: windows-2019
      # vmImage: windows-2022 # (2021-10-04) VS 2022 Preview is not ready for arm64-windows
    steps:
      - task: UsePythonVersion@0
        displayName: "Setup: Python 3.9"
        inputs:
          versionSpec: "3.9"
          addToPath: true
          architecture: "x64"
      - powershell: env
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "x64-windows"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "x86-windows"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "arm64-windows"
      - task: CopyFiles@2
        displayName: "Copy Logs: ${{ parameters.port_name }}"
        inputs:
          SourceFolder: "$(Build.BinariesDirectory)/vcpkg/buildtrees/${{ parameters.port_name }}" # check how https://github.com/lukka/CppBuildTasks works
          Contents: |
            ?(*.log|*.txt)
            *.cmake
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
          OverWrite: true
        condition: always()
      - task: PublishBuildArtifacts@1
        displayName: "Publish Logs"
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "${{ parameters.job_name }}"
        condition: always()

  - job: "linux_${{ parameters.job_name }}"
    pool:
      vmImage: ubuntu-20.04
    steps:
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "x64-linux"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "arm64-android"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "arm-android"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "x64-android"
      - task: CopyFiles@2
        displayName: "Copy Logs: ${{ parameters.port_name }}"
        inputs:
          SourceFolder: "$(Build.BinariesDirectory)/vcpkg/buildtrees/${{ parameters.port_name }}"
          Contents: |
            ?(*.log|*.txt)
            *.cmake
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
          OverWrite: true
        condition: always()
      - task: PublishBuildArtifacts@1
        displayName: "Publish Logs"
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "${{ parameters.job_name }}"
        condition: always()

  - job: "osx_${{ parameters.job_name }}"
    pool:
      vmImage: macOS-10.15
    steps:
      - powershell: env
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "x64-osx"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "arm64-osx"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "x64-ios"
      - template: run-vcpkg-with-overlay.yml
        parameters:
          port_name: "${{ parameters.port_name }}"
          target_triplet: "arm64-ios"
      - task: CopyFiles@2
        displayName: "Copy Logs: ${{ parameters.port_name }}"
        inputs:
          SourceFolder: "$(Build.BinariesDirectory)/vcpkg/buildtrees/${{ parameters.port_name }}"
          Contents: |
            ?(*.log|*.txt)
            *.cmake
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
          OverWrite: true
        condition: always()
      - task: PublishBuildArtifacts@1
        displayName: "Publish Logs"
        inputs:
          PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          ArtifactName: "${{ parameters.job_name }}"
        condition: always()
