#
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables
# https://github.com/actions/virtual-environments/tree/main/images
# https://github.com/lukka/CppBuildTasks
#

trigger:
  branches:
    exclude:
      - docs
      - gh-pages

# pr:
#   - main

schedules:
  - cron: "10 4 * * 6"
    displayName: "Weekly check"
    branches:
      include:
        - main

variables:
  - name: vcpkg.commit
    value: "af2287382b1991dbdcb7e5112d236f3323b9dd7a" # mainstream 2022.03.10
  - name: vcpkg.overlay.ports # == VCPKG_OVERLAY_PORTS
    value: $(Build.SourcesDirectory)/ports # --overlay-ports $(Build.SourcesDirectory)/ports
  - name: VCPKG_DISABLE_METRICS
    value: "true"
  - name: VCPKG_FEATURE_FLAGS
    value: "binarycaching,manifest"

stages:
  - stage: "Triplets"
    # condition: startsWith(variables['build.sourceBranch'], 'refs/heads/triplet/')
    jobs:
      - job: "triplet_android"
        displayName: "Android"
        pool:
          vmImage: ubuntu-20.04
        variables:
          - name: vcpkg.overlay.triplets # VCPKG_OVERLAY_TRIPLETS
            value: $(Build.SourcesDirectory)/triplets # --overlay-triplets $(Build.SourcesDirectory)/triplets
        steps:
          - task: run-vcpkg@0
            displayName: "arm64-android: vulkan-android-test"
            inputs:
              vcpkgArguments: "vulkan-android-test"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-android # --triplet ${triplet}
          - task: run-vcpkg@0
            displayName: "x64-android: vulkan-android-test"
            inputs:
              vcpkgArguments: "vulkan-android-test"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-android
          - task: run-vcpkg@0
            displayName: "arm-android: vulkan-android-test"
            inputs:
              vcpkgArguments: "vulkan-android-test"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm-android

      - job: "triplet_ios_simulator"
        displayName: "iOS Simulator"
        pool:
          vmImage: macOS-11
        variables:
          - name: vcpkg.overlay.triplets # VCPKG_OVERLAY_TRIPLETS
            value: $(Build.SourcesDirectory)/triplets # --overlay-triplets $(Build.SourcesDirectory)/triplets
        steps:
          - task: run-vcpkg@0
            displayName: "arm64-ios-simulator: zlib-ng"
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-ios-simulator
          - task: run-vcpkg@0
            displayName: "x64-ios-simulator: zlib-ng"
            inputs:
              vcpkgArguments: "zlib-ng --debug"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-ios-simulator

  - stage: "Ports" # Check build status of the ports
    jobs:
      - job: "port_windows"
        displayName: "Windows"
        pool:
          vmImage: windows-2019
        timeoutInMinutes: "300"
        steps:
          - task: UsePythonVersion@0
            displayName: "Setup: Python 3.9"
            inputs:
              versionSpec: "3.9"
              addToPath: true
              architecture: "x64"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            displayName: "x64-windows"
            inputs:
              vcpkgArguments: "cpuinfo gemmlowp farmhash openssl3 onnxruntime tensorflow-lite[google-angle,gpu] libdispatch zlib-ng directml fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-windows
          - task: run-vcpkg@0
            displayName: "x86-windows"
            inputs:
              vcpkgArguments: "cpuinfo gemmlowp farmhash openssl3 tensorflow-lite libdispatch zlib-ng directml fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x86-windows
          - task: run-vcpkg@0
            displayName: "arm64-windows"
            inputs:
              vcpkgArguments: "zlib-ng openssl3 directml fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-windows
          - task: run-vcpkg@0
            displayName: "arm-windows"
            inputs:
              vcpkgArguments: "directml fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm-windows

      - job: "port_uwp"
        displayName: "Windows(UWP)"
        pool:
          vmImage: windows-2019
        timeoutInMinutes: "300"
        steps:
          - task: UsePythonVersion@0
            displayName: "Setup: Python 3.9"
            inputs:
              versionSpec: "3.9"
              addToPath: true
              architecture: "x64"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            displayName: "x64-uwp"
            inputs:
              vcpkgArguments: "gemmlowp farmhash openssl3 zlib-ng fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-uwp
          - task: run-vcpkg@0
            displayName: "arm64-uwp"
            inputs:
              vcpkgArguments: "openssl3 zlib-ng fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-uwp

      - job: "port_linux"
        displayName: "Linux"
        pool:
          vmImage: ubuntu-20.04
        timeoutInMinutes: "300"
        steps:
          - powershell: sudo apt-get install -y libnuma-dev libopenmpi-dev nasm libx11-dev libx11-xcb-dev
            displayName: "Install APT packages"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            displayName: "x64-linux"
            inputs:
              vcpkgArguments: "gemmlowp cpuinfo farmhash openssl3 onnxruntime tensorpipe tensorflow-lite zlib-ng directml fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-linux
          - task: run-vcpkg@0
            displayName: "x64-linux(failure)"
            inputs:
              vcpkgArguments: "xnvctrl"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-linux
            continueOnError: true

      - job: "port_android"
        displayName: "Android"
        pool:
          vmImage: ubuntu-20.04
        variables:
          - name: ANDROID_NDK_HOME
            value: "/usr/local/lib/android/sdk/ndk/23.1.7779620" # see ANDROID_NDK_LATEST_HOME of the image
        steps:
          - task: run-vcpkg@0
            displayName: "arm64-android"
            inputs:
              vcpkgArguments: "cpuinfo openssl3 xnnpack zlib-ng libdispatch fft2d farmhash ruy eigen3"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-android
          - task: run-vcpkg@0
            displayName: "arm64-android(custom triplet)"
            inputs:
              vcpkgArguments: "tensorflow-lite[gpu]"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-android
              VCPKG_OVERLAY_TRIPLETS: $(Build.SourcesDirectory)/triplets
          - task: run-vcpkg@0
            displayName: "x64-android"
            inputs:
              vcpkgArguments: "cpuinfo openssl3 xnnpack zlib-ng libdispatch fft2d farmhash ruy eigen3"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-android
          - task: run-vcpkg@0
            displayName: "x64-android(custom triplet)"
            inputs:
              vcpkgArguments: "tensorflow-lite[gpu]"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-android
              VCPKG_OVERLAY_TRIPLETS: $(Build.SourcesDirectory)/triplets
          - task: run-vcpkg@0
            displayName: "arm-android"
            inputs:
              vcpkgArguments: "cpuinfo openssl3 xnnpack zlib-ng libdispatch fft2d farmhash ruy eigen3"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm-android
          - task: run-vcpkg@0
            displayName: "arm-android(custom triplet)"
            inputs:
              vcpkgArguments: "tensorflow-lite[gpu]"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm-android
              VCPKG_OVERLAY_TRIPLETS: $(Build.SourcesDirectory)/triplets
        timeoutInMinutes: "300"

      - job: "port_osx"
        displayName: "Mac(10.15)"
        pool:
          vmImage: macOS-10.15
        timeoutInMinutes: "300"
        steps:
          - powershell: brew install autoconf automake libtool
            displayName: "Install HomeBrew packages"
          - task: UsePythonVersion@0
            displayName: "Setup: Python 3.9"
            inputs:
              versionSpec: "3.9"
              addToPath: true
              architecture: "x64"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - task: run-vcpkg@0
            displayName: "x64-osx"
            inputs:
              vcpkgArguments: "gemmlowp cpuinfo farmhash openssl3 onnxruntime tensorpipe tensorflow-lite[gpu] xnnpack zlib-ng metal-cpp fft2d"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: x64-osx

      - job: "port_ios"
        displayName: "iOS(11)"
        pool:
          vmImage: macOS-11
        timeoutInMinutes: "300"
        steps:
          - powershell: brew install autoconf automake libtool
          - task: run-vcpkg@0
            displayName: "arm64-ios"
            inputs:
              vcpkgArguments: "cpuinfo openssl3 zlib-ng metal-cpp fft2d farmhash"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-ios
          - task: run-vcpkg@0
            displayName: "arm64-osx"
            inputs:
              vcpkgArguments: "gemmlowp cpuinfo openssl3 zlib-ng metal-cpp fft2d farmhash tensorflow-lite[gpu]"
              vcpkgGitCommitId: $(vcpkg.commit)
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-osx

  - stage: "Scripts" # todo: Use of this registry
    jobs:
      - job: "CMake"
        pool:
          vmImage: windows-2019
        steps:
          - task: CondaEnvironment@0
            inputs:
              environmentName: "develop"
              packageSpecs: "python=3.9 pyqt=5.9.2"
              cleanEnvironment: true
          - task: CMake@1
            displayName: "CMake modules/scripts"
            inputs:
              cmakeArgs: "-S $(Build.SourcesDirectory)/tests"
              runInsideShell: true
            env:
              Qt5_DIR: "$(CONDA)/envs/develop/Library/lib/cmake/Qt5"
          - powershell: |
              conda env list
              Get-ChildItem "$(CONDA)\\envs\\develop"
              Get-ChildItem "$(CONDA)\\envs\\develop\\Library"
              Get-ChildItem "$(CONDA)\\envs\\develop\\Library\\lib\\pkgconfig"
              Get-ChildItem "$(CONDA)\\envs\\develop\\Library\\lib\\cmake"
            condition: failed()

  # todo: Deploy stage
  #   Status notification + GitHub release
