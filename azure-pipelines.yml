#
# https://learn.microsoft.com/en-us/azure/devops/pipelines/yaml-schema
# https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables
# https://learn.microsoft.com/en-us/azure/devops/pipelines/scripts/cli/pipeline-variable-group-secret-nonsecret-variables
# https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/?view=azure-pipelines
# https://github.com/actions/runner-images/tree/main/images
#

trigger:
  branches:
    exclude:
      - docs
      - gh-pages

# pr:
#   - main

schedules:
  - cron: "10 4 * * 6"
    displayName: "Weekly check"
    branches:
      include:
        - main

variables:
  # check https://github.com/microsoft/vcpkg/releases
  - name: vcpkg.commit
    value: "fba75d09065fcc76a25dcf386b1d00d33f5175af" # 2024.02.14

  - name: vcpkg.overlay.ports # == VCPKG_OVERLAY_PORTS
    value: $(Build.SourcesDirectory)/ports # --overlay-ports $(Build.SourcesDirectory)/ports
  - name: vcpkg.overlay.triplets # VCPKG_OVERLAY_TRIPLETS
    value: $(Build.SourcesDirectory)/triplets # --overlay-triplets $(Build.SourcesDirectory)/triplets

  # check https://learn.microsoft.com/en-us/vcpkg/users/binarycaching
  - group: Azure-Blob-Storage # az-*
  - name: AzureSource
    value: "x-azblob,https://$(az-storage).blob.core.windows.net/$(az-container),$(az-sas),readwrite"
  - name: vcpkg.binary.sources # VCPKG_BINARY_SOURCES
    value: "default;$(AzureSource)"
  - name: vcpkg.default.binary.cache
    value: $(Build.ArtifactStagingDirectory)/vcpkg-archives

stages:
  - stage: "Triplets"
    jobs:
      - job: "triplet_ios_simulator"
        displayName: "iOS Simulator"
        pool:
          vmImage: macOS-13
        steps:
          - powershell: brew install $(Get-Content test/packages-homebrew.txt)
            displayName: "Install HomeBrew packages"
          - task: PowerShell@2
            displayName: "Triplet: ios-simulator"
            inputs:
              script: |
                New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
                vcpkg --version
                $Ports=$(Get-Content test/azure-triplet-ios.txt)
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build `
                  --triplet arm64-ios-simulator --debug
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build `
                  --triplet x64-ios-simulator
              targetType: 'inline'

  - stage: "Windows"
    dependsOn: "Triplets"
    jobs:
      - job: "port_windows_arm"
        displayName: "Windows(ARM)"
        pool:
          vmImage: windows-2022
        variables:
          - name: vcpkg.root
            value: "C:/vcpkg" # VCPKG_INSTALLATION_ROOT
        strategy:
          matrix:
            arm64_windows:
              vcpkg.default.triplet: "arm64-windows"
            arm64_uwp:
              vcpkg.default.triplet: "arm64-uwp"
        steps:
          - powershell: New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
          - task: Cache@2
            inputs:
              key: '"v2406-bin-uwp" | "$(vcpkg.default.triplet)"'
              restoreKeys: |
                "v2406-bin-uwp" | "$(vcpkg.default.triplet)"
                "v2404-bin-uwp" | "$(vcpkg.default.triplet)"
              path: $(vcpkg.default.binary.cache)
          - task: PowerShell@2
            displayName: "Test: arm64-windows"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-arm64-windows.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
            condition: ne(variables['vcpkg.default.triplet'], 'arm64-uwp')
          - task: PowerShell@2
            displayName: "Test: arm64-uwp"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-arm64-uwp.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
            condition: eq(variables['vcpkg.default.triplet'], 'arm64-uwp')
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(vcpkg.root)/buildtrees/"
              Contents: |
                **/?(*.log|*.txt|*.cmake)
              TargetFolder: "$(Build.ArtifactStagingDirectory)/log"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/log"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "500"

  - stage: "Ubuntu"
    dependsOn: "Triplets"
    jobs:
      - job: "port_linux"
        displayName: "Linux"
        pool:
          vmImage: ubuntu-22.04
        variables:
          - name: vcpkg.root
            value: "/usr/local/share/vcpkg" # VCPKG_INSTALLATION_ROOT
        strategy:
          matrix:
            x64_clang15:
              vcpkg.default.triplet: "x64-linux"
              cc: clang-15
              cxx: clang++-15
            x64_gcc13:
              vcpkg.default.triplet: "x64-linux"
              cc: gcc-13
              cxx: g++-13
        steps:
          - powershell: sudo apt-get install -y $(Get-Content test/packages-apt.txt)
            displayName: "Install APT packages"
          - powershell: New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
          - task: Cache@2
            inputs:
              key: '"v2406-bin-ubuntu" | "$(vcpkg.default.triplet)_$(cc)"'
              restoreKeys: |
                "v2406-bin-ubuntu" | "$(vcpkg.default.triplet)_$(cc)"
                "v2404-bin-ubuntu" | "$(vcpkg.default.triplet)_$(cc)"
              path: $(vcpkg.default.binary.cache)
          - task: PowerShell@2
            displayName: "Test: $(cxx)"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-linux.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(vcpkg.root)/buildtrees/"
              Contents: |
                **/?(*.log|*.txt|*.cmake)
              TargetFolder: "$(Build.ArtifactStagingDirectory)/log"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/log"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "500"

      - job: "port_android"
        displayName: "Android"
        pool:
          vmImage: ubuntu-22.04
        variables:
          - name: vcpkg.root
            value: "/usr/local/share/vcpkg" # VCPKG_INSTALLATION_ROOT
        strategy:
          matrix: # https://github.com/android/ndk/releases
            arm64_ndk26:
              vcpkg.default.triplet: "arm64-android"
              android.ndk.home: "/usr/local/lib/android/sdk/ndk/26.1.10909125"
            x64_ndk26:
              vcpkg.default.triplet: "x64-android"
              android.ndk.home: "/usr/local/lib/android/sdk/ndk/26.1.10909125"
        steps:
          - powershell: New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
          - task: Cache@2
            inputs:
              key: '"v2406-bin-android" | "$(vcpkg.default.triplet)"'
              restoreKeys: |
                "v2406-bin-android" | "$(vcpkg.default.triplet)"
                "v2404-bin-android" | "$(vcpkg.default.triplet)"
              path: $(vcpkg.default.binary.cache)
          - task: PowerShell@2
            displayName: "Test: $(vcpkg.default.triplet)"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-android.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(vcpkg.root)/buildtrees/"
              Contents: |
                **/?(*.log|*.txt|*.cmake)
              TargetFolder: "$(Build.ArtifactStagingDirectory)/log"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/log"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "500"

  - stage: "Apple"
    dependsOn: "Triplets"
    jobs:
      - job: "osx_host_tools"
        displayName: "Mac(Host)"
        pool:
          vmImage: macOS-13
        variables:
          - name: vcpkg.root
            value: "/usr/local/share/vcpkg"
        steps:
          - powershell: brew install $(Get-Content test/packages-homebrew.txt)
            displayName: "Install HomeBrew packages"
          - task: Cache@2
            inputs:
              key: '"v2406-bin-mac-host"'
              restoreKeys: |
                "v2406-bin-mac-host"
                "v2404-bin-mac-host"
              path: $(vcpkg.default.binary.cache)
          - task: PowerShell@2
            displayName: "Test: osx(host)"
            inputs:
              script: |
                New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
                $Ports=$(Get-Content "test/azure-port-osx-host.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(vcpkg.root)/buildtrees/"
              Contents: |
                **/?(*.log|*.txt|*.cmake)
              TargetFolder: "$(Build.ArtifactStagingDirectory)/log"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/log"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "120"

      - job: "port_osx"
        displayName: "Mac"
        pool:
          vmImage: macOS-13
        variables:
          - name: vcpkg.root
            value: "/usr/local/share/vcpkg"
        strategy:
          matrix:
            arm64_osx:
              vcpkg.default.triplet: "arm64-osx"
            x64_osx:
              vcpkg.default.triplet: "x64-osx"
        steps:
          - powershell: brew install $(Get-Content test/packages-homebrew.txt)
            displayName: "Install HomeBrew packages"
          - task: UsePythonVersion@0
            displayName: "Setup: Python 3.11"
            inputs:
              versionSpec: "3.11"
              addToPath: true
              architecture: "x64"
          - powershell: pip install typing-extensions pybind11 numpy pyyaml
            displayName: "Install Python packages"
          - powershell: New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
          - task: Cache@2
            inputs:
              key: '"v2406-bin-osx" | "$(vcpkg.default.triplet)"'
              restoreKeys: |
                "v2406-bin-osx" | "$(vcpkg.default.triplet)"
                "v2404-bin-osx" | "$(vcpkg.default.triplet)"
              path: $(vcpkg.default.binary.cache)
          - task: PowerShell@2
            displayName: "Test: osx"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-osx.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(vcpkg.root)/buildtrees/"
              Contents: |
                **/?(*.log|*.txt|*.cmake)
              TargetFolder: "$(Build.ArtifactStagingDirectory)/log"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/log"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "500"

      - job: "port_ios"
        displayName: "iOS"
        pool:
          vmImage: macOS-13
        variables:
          - name: vcpkg.root
            value: "/usr/local/share/vcpkg"
        strategy:
          matrix:
            arm64_ios:
              # vcpkg.default.triplet: "arm64-ios"
              vcpkg.overlay.triplets: "$(Build.SourcesDirectory)/triplets"
        steps:
          - powershell: brew install $(Get-Content test/packages-homebrew.txt)
            displayName: "Install HomeBrew packages"
          - powershell: New-Item -Type Directory -Force "$env:VCPKG_DEFAULT_BINARY_CACHE"
          - task: Cache@2
            inputs:
              key: '"v2406-bin-ios" | "$(vcpkg.default.triplet)"'
              restoreKeys: |
                "v2406-bin-ios" | "$(vcpkg.default.triplet)"
                "v2404-bin-ios" | "$(vcpkg.default.triplet)"
              path: $(vcpkg.default.binary.cache)
          - task: PowerShell@2
            displayName: "Test: arm64-ios"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-ios.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-ios
          - task: PowerShell@2
            displayName: "Test: arm64-ios-simulator"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-ios.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
            env:
              VCPKG_DEFAULT_TRIPLET: arm64-ios-simulator
          - task: PowerShell@2
            displayName: "Test: x64-ios-simulator"
            inputs:
              script: |
                $Ports=$(Get-Content "test/azure-port-ios.txt")
                vcpkg install $Ports --clean-buildtrees-after-build --clean-packages-after-build
              targetType: 'inline'
            env:
              VCPKG_DEFAULT_TRIPLET: x64-ios-simulator
          - task: CopyFiles@2
            inputs:
              SourceFolder: "$(vcpkg.root)/buildtrees/"
              Contents: |
                **/?(*.log|*.txt|*.cmake)
              TargetFolder: "$(Build.ArtifactStagingDirectory)/log"
              OverWrite: true
            condition: always()
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/log"
              ArtifactName: "$(Agent.JobName)"
            condition: always()
        timeoutInMinutes: "500"

  # todo: Deploy stage
  #   Status notification + GitHub release
